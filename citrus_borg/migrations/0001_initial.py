# Generated by Django 2.1.1 on 2018-11-21 23:32

import citrus_borg.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AllowedEventSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_index=True, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('source_name', models.CharField(db_index=True, help_text='the equivalent of filtering by -ProviderName in Get-WinEvent: the application will only capture events generated by providers listed in this model', max_length=253, unique=True, verbose_name='source name')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='citrus_borg_allowedeventsource_created_by_related', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='citrus_borg_allowedeventsource_updated_by_related', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Allowed Event Source',
                'verbose_name_plural': 'Allowed Event Sources',
            },
        ),
        migrations.CreateModel(
            name='HistoricalAllowedEventSource',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('source_name', models.CharField(db_index=True, help_text='the equivalent of filtering by -ProviderName in Get-WinEvent: the application will only capture events generated by providers listed in this model', max_length=253, verbose_name='source name')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Allowed Event Source',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalKnownBrokeringDevice',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('broker_name', models.CharField(db_index=True, help_text='the name of a CST broker that has serviced at least one request', max_length=15, verbose_name='broker name')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Citrix XML Broker',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalWinlogbeatHost',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('host_name', models.CharField(db_index=True, max_length=63, verbose_name='host name')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, protocol='IPv4', verbose_name='IP address')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Citrix Bot',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='KnownBrokeringDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_index=True, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('broker_name', models.CharField(db_index=True, help_text='the name of a CST broker that has serviced at least one request', max_length=15, unique=True, verbose_name='broker name')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='citrus_borg_knownbrokeringdevice_created_by_related', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='citrus_borg_knownbrokeringdevice_updated_by_related', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Citrix XML Broker',
                'verbose_name_plural': 'Citrix XML Brokers',
            },
        ),
        migrations.CreateModel(
            name='WindowsLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_index=True, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('log_name', models.CharField(db_index=True, max_length=64, unique=True, verbose_name='Log Name')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='citrus_borg_windowslog_created_by_related', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='citrus_borg_windowslog_updated_by_related', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Supported Windows Log',
                'verbose_name_plural': 'Supported Windows Logs',
            },
        ),
        migrations.CreateModel(
            name='WinlogbeatHost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_index=True, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('host_name', models.CharField(db_index=True, max_length=63, unique=True, verbose_name='host name')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, protocol='IPv4', verbose_name='IP address')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='citrus_borg_winlogbeathost_created_by_related', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='citrus_borg_winlogbeathost_updated_by_related', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Citrix Bot',
                'verbose_name_plural': 'Citrix Bots',
            },
        ),
        migrations.CreateModel(
            name='WinlogEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=citrus_borg.models.get_uuid, unique=True, verbose_name='UUID')),
                ('record_number', models.BigIntegerField(db_index=True, help_text='event record external identifier', verbose_name='Record Number')),
                ('event_state', models.CharField(db_index=True, default='TBD', help_text='Status of the Citrix application logon request', max_length=32, verbose_name='Status')),
                ('event_test_result', models.NullBooleanField(verbose_name='Test Result')),
                ('storefront_connection_duration', models.DurationField(blank=True, db_index=True, null=True, verbose_name='Storefront connection time')),
                ('receiver_startup_duration', models.DurationField(blank=True, db_index=True, null=True, verbose_name='receiver startup time')),
                ('connection_achieved_duration', models.DurationField(blank=True, db_index=True, null=True, verbose_name='Connection time')),
                ('logon_achieved_duration', models.DurationField(blank=True, db_index=True, null=True, verbose_name='Logon time')),
                ('logoff_achieved_duration', models.DurationField(blank=True, db_index=True, null=True, verbose_name='Logoff time')),
                ('failure_reason', models.TextField(blank=True, null=True, verbose_name='Failure Reason')),
                ('failure_details', models.TextField(blank=True, null=True, verbose_name='Failure Details')),
                ('event_source', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='citrus_borg.AllowedEventSource', verbose_name='Event Provider')),
                ('source_host', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='citrus_borg.WinlogbeatHost', verbose_name='Event Source Host')),
                ('windows_log', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='citrus_borg.WindowsLog', verbose_name='Windows Log')),
                ('xml_broker', models.ForeignKey(blank=True, help_text='The Citrix XML Broker that successfully serviced this request', null=True, on_delete=django.db.models.deletion.SET_NULL, to='citrus_borg.KnownBrokeringDevice', verbose_name='XML Broker')),
            ],
        ),
    ]
