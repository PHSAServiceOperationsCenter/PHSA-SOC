# Generated by Django 2.1.1 on 2018-11-30 21:19

from django.db import migrations


def prepare_task_schedules(apps, schema_editor):
    periodic_tasks = [
        ('Dead Citrix monitoring bots alert',
         'citrus_borg.tasks.email_dead_borgs_alert', 10, 'minutes',),
        ('Dead Citrix client sites alert',
         'citrus_borg.tasks.email_dead_sites_alert', 10, 'minutes',),
        ('Dead Citrix farm hosts alert',
         'citrus_borg.tasks.email_dead_servers_alert', 12, 'hours',),
        ('Citrix failed logon alerts',
         'citrus_borg.tasks.email_failed_login_alarm', 10, 'minutes',), ]

    cron_tasks = [
        ('Purge windows logs events',
         'citrus_borg.tasks.expire_events', '01', '01',),
        ('Dead Citrix monitoring bots report',
         'citrus_borg.tasks.email_dead_borgs_report', '06', '45',),
        ('Dead Citrix client sites report',
         'citrus_borg.tasks.email_dead_sites_report', '06', '50',),
        ('Dead Citrix farm hosts report',
         'citrus_borg.tasks.email_dead_servers_report', '06', '55',),
        ('Citrix logon event summary',
         'citrus_borg.tasks.email_borg_login_summary_report', '06', '40',), ]

    CrontabSchedule = apps.get_model('django_celery_beat', 'CrontabSchedule')
    IntervalSchedule = apps.get_model('django_celery_beat', 'IntervalSchedule')
    PeriodicTask = apps.get_model('django_celery_beat', 'PeriodicTask')

    for _task in cron_tasks:
        cron, _ = CrontabSchedule.objects.get_or_create(
            minute=_task[2], hour=_task[3], day_of_week='*', day_of_month='*',
            month_of_year='*')

        PeriodicTask.objects.create(
            crontab=cron, name=_task[0], task=_task[1])

    for _task in periodic_tasks:
        interval, _ = IntervalSchedule.objects.get_or_create(
            every=_task[2], period=_task[3])

        PeriodicTask.objects.create(
            interval=interval, name=_task[0], task=_task[1])


class Migration(migrations.Migration):
    replaces = [
        ('citrus_borg', '0009_prepare_task_scheddules'),
    ]


    dependencies = [
        ('citrus_borg', '0007_populate_bots'),
    ]

    operations = [
        migrations.RunPython(prepare_task_schedules,
                             reverse_code=migrations.RunPython.noop)
    ]
