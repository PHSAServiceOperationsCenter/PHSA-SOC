# Generated by Django 2.1.4 on 2019-03-18 18:20
import pytz
from django.db import migrations


def add_beats(apps, schema_editor):
    timezone = pytz.timezone('America/Vancouver')

    periodic_tasks = [
        {
            'name':
            ('Refresh Orion node ID values for Citrix bots'),
            'task': 'citrus_borg.tasks.get_orion_ids',
            'args': '[]',
            'kwargs': '{}',
            'interval': {
                'every': 24,
                'period': 'hours',
            },
        },
        {
            'name':
            ('Refresh Orion alerts for Citrix logons'),
            'task': 'orion_flash.tasks.refresh_borg_alerts',
            'args': '["orion_flash.citrusborgloginalert"]',
            'kwargs': '{}',
            'interval': {
                'every': 12,
                'period': 'minutes',
            },
        },
        {
            'name':
            ('Refresh Orion alerts for Citrix response times'),
            'task': 'orion_flash.tasks.refresh_borg_alerts',
            'args': '["orion_flash.citrusborguxalert"]',
            'kwargs': '{}',
            'interval': {
                'every': 12,
                'period': 'minutes',
            },
        },
    ]

    cron_tasks = [
        {
            'name':
            ('Refresh Orion alerts for dead Citrix bots'),
            'task': 'orion_flash.tasks.refresh_borg_alerts',
            'args': '["orion_flash.deadcitrusbotalert"]',
            'kwargs': '{}',
            'crontab': {
                'minute': '21',
                'hour': '07,15,23',
                'day_of_week': '*',
                'day_of_month': '*',
                'month_of_year': '*',
                'timezone': timezone,
            },
        },
    ]

    CrontabSchedule = apps.get_model('django_celery_beat', 'CrontabSchedule')
    IntervalSchedule = apps.get_model(
        'django_celery_beat', 'IntervalSchedule')
    PeriodicTask = apps.get_model('django_celery_beat', 'PeriodicTask')

    for _task in cron_tasks:
        cron, _ = CrontabSchedule.objects.get_or_create(**_task['crontab'])

        _task['crontab'] = cron

        PeriodicTask.objects.create(**_task)

    for _task in periodic_tasks:
        interval, _ = IntervalSchedule.objects.get_or_create(
            **_task['interval'])

        _task['interval'] = interval

        PeriodicTask.objects.create(**_task)


class Migration(migrations.Migration):

    dependencies = [
        ('citrus_borg', '0014_add_failed_login_tasks'),
    ]

    operations = [
        migrations.RunPython(add_beats,
                             reverse_code=migrations.RunPython.noop)
    ]
