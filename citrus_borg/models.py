"""
.. _models:

django models for the citrus_borg app

:module:    citrus_borg.models

:copyright:

    Copyright 2018 Provincial Health Service Authority
    of British Columbia

:contact:    serban.teodorescu@phsa.ca

:updated:    nov. 19, 2018

"""
from django.db import models
from django.utils.translation import gettext_lazy as _
from simple_history.models import HistoricalRecords

from p_soc_auto_base.models import BaseModel


class WinlogbeatHost(BaseModel, models.Model):
    """
    hosts where the winlogbeat daemon is collecting windows events
    """
    host_name = models.CharField(
        _('host name'), max_length=63, db_index=True, unique=True,
        blank=False, null=False)
    ip_address = models.GenericIPAddressField(
        _('IP address'), protocol='IPv4', blank=True, null=True)
    history = HistoricalRecords()

    def __str__(self):
        return '%s (%s)' % (self.host_name, self.ip_address)

    class Meta:
        verbose_name = _('Citrix Bot')
        verbose_name_plural = _('Citrix Bots')


class AllowedEventSource(BaseModel, models.Model):
    """
    only save events originating from specific Log_name and source_name
    combinations
    """
    source_name = models.CharField(
        _('source name'), max_length=253, db_index=True, blank=False,
        null=False, unique=True,
        help_text=_(
            'the equivalent of filtering by -ProviderName in Get-WinEvent:'
            ' the application will only capture events generated by'
            ' providers listed in this model'))
    history = HistoricalRecords()

    def __str__(self):
        return self.source_name

    class Meta:
        verbose_name = _('Allowed Event Source')
        verbose_name_plural = _('Allowed Event Sources')


class KnownBrokeringDevice(BaseModel, models.Model):
    """
    keep a list of brokers returned by the logon simulator
    """
    broker_name = models.CharField(
        _('broker name'), max_length=15, unique=True, db_index=True,
        blank=False, null=False,
        help_text=_('the name of a CST broker that has serviced at least one'
                    ' request'))
    history = HistoricalRecords()

    def __str__(self):
        return self.broker_name

    class Meta:
        verbose_name = _('Citrix XML Broker')
        verbose_name_plural = _('Citrix XML Brokers')


class BorgSettings(BaseModel, models.Model):
    """
    user configurable settings
    """
    history = HistoricalRecords()
    pass


class WinlogEvent(models.Model):
    """
    windows logs events
    """
    pass
