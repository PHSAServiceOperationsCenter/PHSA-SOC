# Generated by Django 2.2.6 on 2019-11-18 17:05
from django.contrib.auth.models import User, UserManager

from django.db import migrations


def populate_ldap_errors(apps, schema_editor):

    user = User.objects.filter(is_superuser=True)
    if user.exists():
        user = user.first()
    else:
        user = User.objects.create(
            username='soc_su', email='soc_su@phsa.ca',
            password='soc_su_password', is_active=True, is_staff=True,
            is_superuser=True)
        user.set_password('soc_su_password')
        user.save()

    ldap_errors = [
        {'error_unique_identifier': '525',
         'short_description': 'LDAP_NO_SUCH_OBJECT',
         'notes': 'Entry does not exist',
         'comments': None, },
        {'error_unique_identifier': '52e',
         'short_description': 'ERROR_LOGON_FAILURE',
         'notes': ('Returns when username is valid but password/credential'
                   ' is invalid.'),
         'comments': ('Will prevent most other errors from being displayed'
                      ' as noted.'), },
        {'error_unique_identifier': '52f',
         'short_description': 'ERROR_ACCOUNT_RESTRICTION',
         'notes': ('Account Restrictions are preventing this user from signing in.'),
         'comments': ('For example: blank passwords are not allowed,'
                      ' sign-in times are limited, or a policy restriction'
                      ' has been enforced.'), },
        {'error_unique_identifier': '530',
         'short_description': 'ERROR_INVALID_LOGON_HOURS',
         'notes': 'Time Restriction:Entry logon time restriction violation',
         'comments': None, },
        {'error_unique_identifier': '531',
         'short_description': 'ERROR_INVALID_WORKSTATION',
         'notes': 'Device Restriction:Entry not allowed to log on to this computer.',
         'comments': None, },
        {'error_unique_identifier': '532',
         'short_description': 'ERROR_PASSWORD_EXPIRED',
         'notes': ('Password Expiration: Entry password has expired LDAP'
                   ' User-Account-Control Attribute - ERROR_PASSWORD_EXPIRED'),
         'comments': 'Returns only when presented with valid username and password/credential. ', },
        {'error_unique_identifier': '533',
         'short_description': 'ERROR_ACCOUNT_DISABLED',
         'notes': 'Administratively Disabled: LDAP User-Account-Control Attribute - ACCOUNTDISABLE',
         'comments': 'Returns only when presented with valid username and password/credential.', },
        {'error_unique_identifier': '568',
         'short_description': 'ERROR_TOO_MANY_CONTEXT_IDS',
         'notes': ("During a logon attempt, the user's security context"
                   " accumulated too many security Identifiers. (ie Group-AD)"),
         'comments': None, },
        {'error_unique_identifier': '701',
         'short_description': 'ERROR_ACCOUNT_EXPIRED',
         'notes': 'LDAP Password Expiration: User-Account-Control Attribute - ACCOUNTEXPIRED',
         'comments': 'Returns only when presented with valid username and password/credential.', },
        {'error_unique_identifier': '773',
         'short_description': 'ERROR_PASSWORD_MUST_CHANGE',
         'notes': ("Password Expiration: Entry's password must be changed"
                   " before logging on LDAP pwdLastSet: value of 0 indicates"
                   " admin-required password change - MUST_CHANGE_PASSWD"),
         'comments': 'Returns only when presented with valid username and password/credential. ', },
        {'error_unique_identifier': '775',
         'short_description': 'ERROR_ACCOUNT_LOCKED_OUT',
         'notes': ('Intruder Detection:Entry is currently locked out and may'
                   ' not be logged on to LDAP User-Account-Control Attribute - LOCKOUT'),
         'comments': 'Returns even if invalid password is presented', }, ]

    ldap_error_model = apps.get_model('ldap_probe', 'LdapCredError')
    for ldap_error in ldap_errors:
        ldap_error.update(created_by_id=user.id, updated_by_id=user.id)
        ldap_error_entry = ldap_error_model(**ldap_error)
        ldap_error_entry.save()


class Migration(migrations.Migration):

    dependencies = [
        ('ldap_probe', '0006_auto_20191118_0900'),
    ]

    operations = [
        migrations.RunPython(populate_ldap_errors,
                             reverse_code=migrations.RunPython.noop)
    ]
