# Generated by Django 2.2.6 on 2019-11-26 16:55
import pytz
from django.db import migrations


def add_beats(apps, schema_editor):
    timezone = pytz.timezone('America/Vancouver')

    periodic_tasks = [
        {'name': ('AD controller monitoring: bootstrap probes'),
         'task': 'ldap_probe.tasks.bootstrap_ad_probes',
         'args': '', 'kwargs': '',
         'interval': {'every': 5,
                      'period': 'minutes', }, }, ]

    cron_tasks = [
        {'name': ('AD controller monitoring: expire log entries'),
         'task': 'ldap_probe.tasks.expire_entries',
         'args': '', 'kwargs': '',
         'crontab': {'minute': '11',
                     'hour': '00', 'day_of_week': '*', 'day_of_month': '*',
                     'month_of_year': '*', 'timezone': timezone, }, },
        {'name': ('AD controller monitoring: delete expired log entries'),
         'task': 'ldap_probe.tasks.expire_entries',
         'args': '', 'kwargs': '',
         'crontab': {'minute': '17',
                     'hour': '00', 'day_of_week': '*', 'day_of_month': '*',
                     'month_of_year': '*', 'timezone': timezone, }, }, ]

    CrontabSchedule = apps.get_model('django_celery_beat', 'CrontabSchedule')
    IntervalSchedule = apps.get_model(
        'django_celery_beat', 'IntervalSchedule')
    PeriodicTask = apps.get_model('django_celery_beat', 'PeriodicTask')

    for _task in cron_tasks:
        cron, _ = CrontabSchedule.objects.get_or_create(**_task['crontab'])

        _task['crontab'] = cron

        PeriodicTask.objects.create(**_task)

    for _task in periodic_tasks:
        interval, _ = IntervalSchedule.objects.get_or_create(
            **_task['interval'])

        _task['interval'] = interval

        PeriodicTask.objects.create(**_task)


class Migration(migrations.Migration):
    replaces = [
        ('ldap_probe', '0015_realy_add_beats_for_ldap_data'),
    ]

    dependencies = [
        ('ldap_probe', '0010_add_beats_for_ldap_data'),
    ]

    operations = [
        migrations.RunPython(
            add_beats, reverse_code=migrations.RunPython.noop),
    ]
