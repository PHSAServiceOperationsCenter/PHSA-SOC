# Generated by Django 2.2.6 on 2019-12-05 17:19
import pytz
from django.db import migrations


def add_beats(apps, schema_editor):
    timezone = pytz.timezone('America/Vancouver')

    periodic_tasks = [
        #         {'name': ('AD controller monitoring: bootstrap probes'),
        #          'task': 'ldap_probe.tasks.bootstrap_ad_probes',
        #          'args': '', 'kwargs': '',
        #          'interval': {'every': 5,
        #                       'period': 'minutes', }, },
    ]

    cron_tasks = [
        {'name': ('AD controller monitoring: summary report, full bind, orion'),
         'task': 'ldap_probe.tasks.dispatch_ldap_report',
         'args': '["ldap_probe.orionadnode", false]',
         'kwargs': '',
         'crontab': {'minute': '29',
                     'hour': '*', 'day_of_week': '*', 'day_of_month': '*',
                     'month_of_year': '*', 'timezone': timezone, }, },
        {'name': ('AD controller monitoring: summary report, anon bind, orion'),
         'task': 'ldap_probe.tasks.dispatch_ldap_report',
         'args': '["ldap_probe.orionadnode", true]',
         'kwargs': '',
         'crontab': {'minute': '31',
                     'hour': '*', 'day_of_week': '*', 'day_of_month': '*',
                     'month_of_year': '*', 'timezone': timezone, }, },
        {'name': ('AD controller monitoring: summary report, full bind, non orion'),
         'task': 'ldap_probe.tasks.dispatch_ldap_report',
         'args': '["ldap_probe.nonorionadnode", false]',
         'kwargs': '',
         'crontab': {'minute': '33',
                     'hour': '*', 'day_of_week': '*', 'day_of_month': '*',
                     'month_of_year': '*', 'timezone': timezone, }, },
        {'name': ('AD controller monitoring: summary report, anon bind, non orion'),
         'task': 'ldap_probe.tasks.dispatch_ldap_report',
         'args': '["ldap_probe.nonorionadnode", true]',
         'kwargs': '',
         'crontab': {'minute': '35',
                     'hour': '*', 'day_of_week': '*', 'day_of_month': '*',
                     'month_of_year': '*', 'timezone': timezone, }, },
    ]

    CrontabSchedule = apps.get_model('django_celery_beat', 'CrontabSchedule')
    IntervalSchedule = apps.get_model(
        'django_celery_beat', 'IntervalSchedule')
    PeriodicTask = apps.get_model('django_celery_beat', 'PeriodicTask')

    for _task in cron_tasks:
        cron, _ = CrontabSchedule.objects.get_or_create(**_task['crontab'])

        _task['crontab'] = cron

        PeriodicTask.objects.create(**_task)

    for _task in periodic_tasks:
        interval, _ = IntervalSchedule.objects.get_or_create(
            **_task['interval'])

        _task['interval'] = interval

        PeriodicTask.objects.create(**_task)


class Migration(migrations.Migration):

    dependencies = [
        ('ldap_probe', '0023_add_subscriptions_ldap_summary_reports'),
    ]

    operations = [
        migrations.RunPython(
            add_beats, reverse_code=migrations.RunPython.noop),
    ]
