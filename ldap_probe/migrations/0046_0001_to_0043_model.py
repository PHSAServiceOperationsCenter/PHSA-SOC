# Generated by Django 2.2.6 on 2020-01-17 19:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import ldap_probe.models
import p_soc_auto_base.utils
import re


class Migration(migrations.Migration):
    replaces = [
        ('ldap_probe', '0001_initial'),
        ('ldap_probe', '0005_auto_20191115_1456'),
        ('ldap_probe', '0006_auto_20191118_0900'),
        ('ldap_probe', '0008_ldapprobelog_created_on'),
        ('ldap_probe', '0009_ldapprobelog_is_expired'),
        ('ldap_probe', '0011_auto_20191122_1518'),
        ('ldap_probe', '0012_auto_20191122_1537'),
        ('ldap_probe', '0013_auto_20191125_1144'),
        ('ldap_probe', '0014_auto_20191125_1455'),
        ('ldap_probe', '0016_auto_20191126_1007'),
        ('ldap_probe', '0017_auto_20191126_1425'),
        ('ldap_probe', '0019_ldapprobelog_failed'),
        ('ldap_probe', '0021_ldapprobelogfailed'),
        ('ldap_probe', '0033_auto_20191217_1435'),
        ('ldap_probe', '0035_auto_20191219_1309'),
        ('ldap_probe', '0042_auto_20200103_0959'),
        ('ldap_probe', '0043_auto_20200103_1141'),
    ]

    dependencies = [
        ('orion_integration', '0015_0001_to_00014_model'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ADNodePerfBucket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_index=True, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('is_default', models.BooleanField(db_index=True, default=False, help_text='If set, then this row will be preferred by the application. Note there can only be one default row in the table.', verbose_name='Default Instance')),
                ('name', models.CharField(db_index=True, help_text='A descriptive name to help determine which nodes should be included in the bucket.', max_length=253, unique=True, verbose_name='Bucket name')),
                ('avg_warn_threshold', models.DecimalField(db_index=True, decimal_places=4, default=ldap_probe.models.ADNodePerfBucket._get_default_warn_threshold, help_text='If the average AD services response time is worse than this value, include this node in the periodic performance degradation warnings report.', max_digits=6, verbose_name='Warning Response Time Threshold')),
                ('avg_err_threshold', models.DecimalField(db_index=True, decimal_places=4, default=ldap_probe.models.ADNodePerfBucket._get_default_err_threshold, help_text='If the average AD services response time is worse than this value, include this node in the periodic performance degradation errors report.', max_digits=6, verbose_name='Error Response Time Threshold')),
                ('alert_threshold', models.DecimalField(db_index=True, decimal_places=4, default=ldap_probe.models.ADNodePerfBucket._get_default_alert_threshold, help_text='If the AD services response time for any probe is worse than this value, raise an immediate alert.', max_digits=6, verbose_name='Alert Response Time Threshold')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ldap_probe_adnodeperfbucket_created_by_related', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ldap_probe_adnodeperfbucket_updated_by_related', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Performance Group for ADS Nodes',
                'verbose_name_plural': 'Performance Groups for ADS Nodes',
            },
        ),
        migrations.CreateModel(
            name='LDAPBindCred',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_index=True, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('is_default', models.BooleanField(db_index=True, default=False, help_text='If set, then this row will be preferred by the application. Note there can only be one default row in the table.', verbose_name='Default Instance')),
                ('domain', models.CharField(db_index=True, max_length=15, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='windows domain')),
                ('username', models.CharField(db_index=True, max_length=64, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='domain username')),
                ('password', models.CharField(max_length=64, verbose_name='password')),
                ('ldap_search_base', models.CharField(default=ldap_probe.models.LDAPBindCred._get_default_ldap_search_base, max_length=128, verbose_name='DN search base')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ldap_probe_ldapbindcred_created_by_related', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ldap_probe_ldapbindcred_updated_by_related', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'LDAP Bind Credentials Set',
                'verbose_name_plural': 'LDAP Bind Credentials Sets',
            },
        ),
        migrations.CreateModel(
            name='OrionADNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_index=True, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ldap_probe_orionadnode_created_by_related', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('ldap_bind_cred', models.ForeignKey(default=ldap_probe.models.LDAPBindCred.get_default, on_delete=django.db.models.deletion.PROTECT, to='ldap_probe.LDAPBindCred', verbose_name='LDAP Bind Credentials')),
                ('node', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='orion_integration.OrionDomainControllerNode', verbose_name='Orion Node for Domain Controller')),
                ('performance_bucket', models.ForeignKey(blank=True, default=ldap_probe.models.ADNodePerfBucket.get_default, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='ldap_probe.ADNodePerfBucket', verbose_name='Acceptable Performance Limits')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ldap_probe_orionadnode_updated_by_related', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Domain Controller from Orion',
                'verbose_name_plural': 'Domain Controllers from Orion',
                'ordering': ('node__node_caption',),
            },
        ),
        migrations.CreateModel(
            name='NonOrionADNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_index=True, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('node_dns', models.CharField(db_index=True, help_text='The FQDN of the domain controller host. It must respect the rules specified in `RFC1123 <http://www.faqs.org/rfcs/rfc1123.html>`__, section 2.1', max_length=255, unique=True, verbose_name='Fully Qualified Domain Name (FQDN)')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ldap_probe_nonorionadnode_created_by_related', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('ldap_bind_cred', models.ForeignKey(default=ldap_probe.models.LDAPBindCred.get_default, on_delete=django.db.models.deletion.PROTECT, to='ldap_probe.LDAPBindCred', verbose_name='LDAP Bind Credentials')),
                ('performance_bucket', models.ForeignKey(blank=True, default=ldap_probe.models.ADNodePerfBucket.get_default, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='ldap_probe.ADNodePerfBucket', verbose_name='Acceptable Performance Limits')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ldap_probe_nonorionadnode_updated_by_related', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Domain Controller not present in Orion',
                'verbose_name_plural': 'Domain Controllers not present in Orion',
                'ordering': ['node_dns'],
                'get_latest_by': 'updated_on',
            },
        ),
        migrations.CreateModel(
            name='LdapProbeLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=p_soc_auto_base.utils.get_uuid, unique=True, verbose_name='UUID')),
                ('elapsed_initialize', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='LDAP initialization duration')),
                ('elapsed_bind', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='LDAP bind duration')),
                ('elapsed_anon_bind', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='LDAP anonymous bind duration')),
                ('elapsed_read_root', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='LDAP read root DSE duration')),
                ('elapsed_search_ext', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='LDAP extended search duration')),
                ('ad_response', models.TextField(blank=True, null=True, verbose_name='AD controller response')),
                ('errors', models.TextField(blank=True, null=True, verbose_name='Errors')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('is_expired', models.BooleanField(db_index=True, default=False, verbose_name='Probe data has expired')),
                ('failed', models.BooleanField(db_index=True, default=False, verbose_name='Probe failed')),
                ('ad_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ldap_probe.NonOrionADNode', verbose_name='AD controller')),
                ('ad_orion_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ldap_probe.OrionADNode', verbose_name='AD controller (Orion)')),
            ],
            options={
                'verbose_name': 'AD service probe',
                'verbose_name_plural': 'AD service probes',
                'ordering': ('-created_on',),
            },
        ),
        migrations.CreateModel(
            name='LdapCredError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_index=True, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('error_unique_identifier', models.CharField(db_index=True, max_length=3, unique=True, verbose_name='LDAP Error Subcode')),
                ('short_description', models.CharField(db_index=True, max_length=128, verbose_name='Short Description')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ldap_probe_ldapcrederror_created_by_related', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ldap_probe_ldapcrederror_updated_by_related', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Active Directory Bind Error',
                'verbose_name_plural': 'Common Active Directory Bind Errors',
                'ordering': ['error_unique_identifier'],
            },
        ),
        migrations.CreateModel(
            name='LdapProbeAnonBindLog',
            fields=[
            ],
            options={
                'verbose_name': 'AD service probe with limited data',
                'verbose_name_plural': 'AD service probes with limited data',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('ldap_probe.ldapprobelog',),
        ),
        migrations.CreateModel(
            name='LdapProbeFullBindLog',
            fields=[
            ],
            options={
                'verbose_name': 'AD service probe with full data',
                'verbose_name_plural': 'AD service probes with full data',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('ldap_probe.ldapprobelog',),
        ),
        migrations.CreateModel(
            name='LdapProbeLogFailed',
            fields=[
            ],
            options={
                'verbose_name': 'Failed AD service probe',
                'verbose_name_plural': 'Failed AD service probes',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('ldap_probe.ldapprobelog',),
        ),
        migrations.AddIndex(
            model_name='ldapbindcred',
            index=models.Index(fields=['domain', 'username'], name='ldap_probe__domain_d72f9a_idx'),
        ),
        migrations.AddConstraint(
            model_name='ldapbindcred',
            constraint=models.UniqueConstraint(fields=('domain', 'username'), name='unique_account'),
        ),
    ]
