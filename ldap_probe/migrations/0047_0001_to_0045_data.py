# Generated by Django 2.2.6 on 2020-01-17 18:43
from django.contrib.auth.models import User
from django.db import migrations


def populate_ldap_cred_default(apps, schema_editor):
    user = User.objects.filter(is_superuser=True).first()

    default_cred_dict = {
        'domain': 'VCH',
        'username': 'LoginPI01',
        'password': 'LoginPI1!',
        'is_default': True,
        'created_by_id': user.id,
        'updated_by_id': user.id,
    }

    ldap_cred_model = apps.get_model('ldap_probe', 'LDAPBindCred')

    if ldap_cred_model.objects.filter(
            domain__iexact=default_cred_dict['domain'],
            username__iexact=default_cred_dict['username']).exists():
        return

    default_ldap_cred = ldap_cred_model(**default_cred_dict)
    default_ldap_cred.save()


def populate_ac_orion_nodes(apps, schema_editor):
    user = User.objects.filter(is_superuser=True).first()
    ldap_bind_cred = apps.get_model(
        'ldap_probe', 'LDAPBindCred').objects.filter(is_default=True).get()

    orion_nodes = apps.get_model(
        'orion_integration', 'OrionDomainControllerNode').objects.\
        filter(program_application_type='DomainController').all()

    ac_nodes_model = apps.get_model('ldap_probe', 'OrionADNode')

    for node in orion_nodes:
        ac_node = ac_nodes_model(
            node=node, ldap_bind_cred=ldap_bind_cred,
            created_by_id=user.id, updated_by_id=user.id)
        ac_node.save()


def populate_ac_nodes(apps, schema_editor):
    user = User.objects.filter(is_superuser=True).first()

    ldap_bind_cred = apps.get_model(
        'ldap_probe', 'LDAPBindCred').objects.filter(is_default=True).get()

    ac_nodes = [
        'alpha.fraserhealth.org', 'atlas.fraserhealth.org',
        'blackcomb.fraserhealth.org', 'cypress.fraserhealth.org',
        'dcns0002.fraserhealth.org', 'dcns0004.fraserhealth.org',
        'denman.fraserhealth.org ', 'everest.fraserhealth.org',
        'fuji.fraserhealth.org ', 'janus.fraserhealth.org',
        'laila.fraserhealth.org ', 'olympus.fraserhealth.org',
        'phcdc3.phcnet.ca', 'phcdc5.phcnet.ca', 'phcdc7.phcnet.ca',
        'phcdc21.phcnet.ca', 'phcdc41.phcnet.ca', 'phcdc42.phcnet.ca',
        'phsacdcldcphc3.phcnet.ca', 'phsacdcldcphc4.phcnet.ca',
        'phsacdcldcphsa3.phsabc.ehcnet.ca',
        'phsacdcldcphsa4.phsabc.ehcnet.ca', 'phsacdcldcvch3.vch.ca',
        'phsacdcldcvch4.vch.ca', 'phsacdcldcvrhb3.main.vrhb.local',
        'phsacdcldcvrhb4.main.vrhb.local', 'proteus.fraserhealth.org',
        'rainier.fraserhealth.org', 'rhsdc2.main.vrhb.local',
        'robson.fraserhealth.org', 'rootdc4.vrhb.local', 'rootdc5.vrhb.local',
        'rootdc6.vrhb.local', 'spdc0001.healthbc.org',
        'spdc0002.healthbc.org', 'spdc0003.healthbc.org',
        'spdc0004.healthbc.org', 'spdc0005.healthbc.org',
        'spdc0006.healthbc.org', 'spdc0007.healthbc.org',
        'spdc0008.healthbc.org', 'spdc0009.healthbc.org',
        'spdc0010.healthbc.org', 'spdc0011.healthbc.org',
        'spdc0012.healthbc.org', 'spdc0013.healthbc.org',
        'spdc0014.healthbc.org', 'spdc0015.healthbc.org',
        'spdc0016.healthbc.org', 'spdc0017.healthbc.org',
        'spdcphc001.phcnet.ca', 'spdcphsa001.phsabc.ehcnet.ca',
        'spdcvrhb006.main.vrhb.local', 'srvcs01.phsabc.ehcnet.ca',
        'srvcs02.phsabc.ehcnet.ca', 'srvcs03.phsabc.ehcnet.ca',
        'srvcs04.phsabc.ehcnet.ca', 'srvcs41.phsabc.ehcnet.ca',
        'srvfr01.ehcnet.ca', 'srvfr02.ehcnet.ca', 'srvpngcs01.phsapng.ca',
        'srvpngcs02.phsapng.ca', 'svmcs06.phsabc.ehcnet.ca',
        'svmcs10.phsabc.ehcnet.ca', 'svmcs15-new.phsabc.ehcnet.ca',
        'svmcs15.phsabc.ehcnet.ca', 'svmcs16-new.phsabc.ehcnet.ca',
        'svmcs16.phsabc.ehcnet.ca', 'svmfr03.ehcnet.ca', 'vchdc1.vch.ca',
        'vchdc2.vch.ca', 'vchdc3.vch.ca', 'vchdc4.vch.ca', 'vchdc5.vch.ca',
        'vchdc6.vch.ca', 'vchdc7.vch.ca', 'vchdc8.vch.ca', 'vchdc9.vch.ca',
        'vchdc12.vch.ca', 'vchdc13.vch.ca', 'vchdc14.vch.ca',
        'vchdc16.vch.ca', 'vchdc41.vch.ca', 'vesuvius.fraserhealth.org ',
        'vrhbdc5.main.vrhb.local', 'vrhbdc6.main.vrhb.local',
        'vrhbdc7.main.vrhb.local', 'vrhbdc41.main.vrhb.local',
        'whistler.fraserhealth.org', 'whitney.fraserhealth.org',
    ]

    ac_nodes_model = apps.get_model('ldap_probe', 'NonOrionADNode')

    for node_dns in ac_nodes:
        ac_node = ac_nodes_model(
            node_dns=node_dns, ldap_bind_cred=ldap_bind_cred,
            created_by_id=user.id, updated_by_id=user.id)
        ac_node.save()


def populate_ldap_errors(apps, schema_editor):

    user = User.objects.filter(is_superuser=True).first()

    ldap_errors = [
        {'error_unique_identifier': '525',
         'short_description': 'LDAP_NO_SUCH_OBJECT',
         'notes': 'Entry does not exist',
         'comments': None, },
        {'error_unique_identifier': '52e',
         'short_description': 'ERROR_LOGON_FAILURE',
         'notes': ('Returns when username is valid but password/credential'
                   ' is invalid.'),
         'comments': ('Will prevent most other errors from being displayed'
                      ' as noted.'), },
        {'error_unique_identifier': '52f',
         'short_description': 'ERROR_ACCOUNT_RESTRICTION',
         'notes': ('Account Restrictions are preventing this user from signing in.'),
         'comments': ('For example: blank passwords are not allowed,'
                      ' sign-in times are limited, or a policy restriction'
                      ' has been enforced.'), },
        {'error_unique_identifier': '530',
         'short_description': 'ERROR_INVALID_LOGON_HOURS',
         'notes': 'Time Restriction:Entry logon time restriction violation',
         'comments': None, },
        {'error_unique_identifier': '531',
         'short_description': 'ERROR_INVALID_WORKSTATION',
         'notes': 'Device Restriction:Entry not allowed to log on to this computer.',
         'comments': None, },
        {'error_unique_identifier': '532',
         'short_description': 'ERROR_PASSWORD_EXPIRED',
         'notes': ('Password Expiration: Entry password has expired LDAP'
                   ' User-Account-Control Attribute - ERROR_PASSWORD_EXPIRED'),
         'comments': 'Returns only when presented with valid username and password/credential. ', },
        {'error_unique_identifier': '533',
         'short_description': 'ERROR_ACCOUNT_DISABLED',
         'notes': 'Administratively Disabled: LDAP User-Account-Control Attribute - ACCOUNTDISABLE',
         'comments': 'Returns only when presented with valid username and password/credential.', },
        {'error_unique_identifier': '568',
         'short_description': 'ERROR_TOO_MANY_CONTEXT_IDS',
         'notes': ("During a logon attempt, the user's security context"
                   " accumulated too many security Identifiers. (ie Group-AD)"),
         'comments': None, },
        {'error_unique_identifier': '701',
         'short_description': 'ERROR_ACCOUNT_EXPIRED',
         'notes': 'LDAP Password Expiration: User-Account-Control Attribute - ACCOUNTEXPIRED',
         'comments': 'Returns only when presented with valid username and password/credential.', },
        {'error_unique_identifier': '773',
         'short_description': 'ERROR_PASSWORD_MUST_CHANGE',
         'notes': ("Password Expiration: Entry's password must be changed"
                   " before logging on LDAP pwdLastSet: value of 0 indicates"
                   " admin-required password change - MUST_CHANGE_PASSWD"),
         'comments': 'Returns only when presented with valid username and password/credential. ', },
        {'error_unique_identifier': '775',
         'short_description': 'ERROR_ACCOUNT_LOCKED_OUT',
         'notes': ('Intruder Detection:Entry is currently locked out and may'
                   ' not be logged on to LDAP User-Account-Control Attribute - LOCKOUT'),
         'comments': 'Returns even if invalid password is presented', }, ]

    ldap_error_model = apps.get_model('ldap_probe', 'LdapCredError')
    for ldap_error in ldap_errors:
        ldap_error.update(created_by_id=user.id, updated_by_id=user.id)
        ldap_error_entry = ldap_error_model(**ldap_error)
        ldap_error_entry.save()


def add_new_perf_buckets(apps, schema_editor):
    user = User.objects.filter(is_superuser=True).first()

    user_dict = {'created_by_id': user.id, 'updated_by_id': user.id, }

    perf_buckets = [{
        'name':               'Alert at 10 ms',
        'avg_warn_threshold': .0025,
        'avg_err_threshold':  .005,
        'alert_threshold':    .01,
        'notes':              '',
        'is_default':         False,
    }, {
        'name':               'Alert at 100 ms',
        'avg_warn_threshold': .025,
        'avg_err_threshold':  .05,
        'alert_threshold':    .1,
        'notes':              '',
        'is_default':         True,
    }, {
        'name':               'Alert at 1 s',
        'avg_warn_threshold': .25,
        'avg_err_threshold':  .5,
        'alert_threshold':    1,
        'notes':              '',
        'is_default':         False,
    },  {
        'name': 'Alert at 10 s',
        'avg_warn_threshold': 2.5,
        'avg_err_threshold': 5,
        'alert_threshold': 10,
        'notes': '',
        'is_default': False,
    }, ]

    perf_bucket_model = apps.get_model('ldap_probe', 'ADNodePerfBucket')
    for perf_bucket_dict in perf_buckets:
        perf_bucket_dict.update(user_dict)
        perf_bucket = perf_bucket_model(**perf_bucket_dict)
        perf_bucket.save()


def update_dc_with_bucket(apps, name, bucket):
    non_orion_node_model = apps.get_model('ldap_probe', 'NonOrionADNode')
    orion_node_model = apps.get_model('ldap_probe', 'OrionADNode')
    non_orion_node_model.objects.filter(node_dns=name).update(
            performance_bucket=bucket)

    orion_node_model.objects.filter(node__node_dns=name).update(
             performance_bucket=bucket)

    orion_node_model.objects.filter(node__node_caption=name).update(
                performance_bucket=bucket)


def add_dcs_to_buckets(apps, schema_editor):
    bucket_lists = {'Alert at 10 ms': ['srvfr01', 'srvpngcs01.phsapng.ca', 'srvpngcs02.phsapng.ca', 'SPDC0007', 'svmcs10.phsabc.ehcnet.ca', 'svmcs06.phsabc.ehcnet.ca', 'spdcphsa001.phsabc.ehcnet.ca', 'SRVCS01-wmi', 'svmcs16.phsabc.ehcnet.ca', 'srvcs03.phsabc.ehcnet.ca', 'svmcs15.phsabc.ehcnet.ca', 'srvcs02', 'srvfr02', 'spdc0008.healthbc.org', 'srvcs04', 'PHCDC21', 'spdcphc001.phcnet.ca', 'phcdc7', 'spdc0010.healthbc.org', 'phcdc5-wmi', 'SPDC0009', 'SPDC0001', 'DCNS0004', 'SPDC0002', 'SPDC0004', 'SPDC0003'],
                    'Alert at 100 ms': ['VESUVIUS', 'olympus', 'FUJI', 'everest', 'DCNS0002', 'phcdc3', 'PROTEUS', 'JANUS', 'LAILA', 'blackcomb.fraserhealth.org', 'atlas', 'RAINIER', 'whitney.fraserhealth.org', 'ROBSON', 'WHISTLER', 'phcdc42', 'svmcs15-new', 'phcdc41', 'srvcs41', 'svmcs16-new.phsabc.ehcnet.ca', 'spdc0017', 'Cypress', 'SPDC0012', 'SPDC0011', 'SPDC0005', 'SPDC0006', 'SPDC0015', 'SPDC0013', 'SPDC0014', 'SPDC0016'],
                    'Alert at 1 s': ['vchdc14', 'VCHDC6', 'vchdc2', 'spdcvrhb006', 'vchdc1', 'vchdc4.vch.ca', 'rootdc6.vrhb.local', 'VRHBDC7', 'vchdc5', 'rootdc4.vrhb.local', 'VRHBDC5-wmi', 'rootdc5.vrhb.local', 'vchdc3-wmi', 'phsacdcldcphsa3.phsabc.ehcnet.ca', 'VCHDC3-snmp', 'phsacdcldcphc3.phcnet.ca', 'phsacdcldcphsa4.phsabc.ehcnet.ca', 'phsacdcldcphc4.phcnet.ca', 'VRHBDC5-snmp', 'vchdc16', 'VCHDC7-wmi', 'vrhbdc6.main.vrhb.local', 'RHSDC2', 'vchdc41', 'vchdc9', 'vrhbdc41', 'vchdc8-wmi', 'vchdc13', 'vchdc12'],
                    'Alert at 10 s': ['phsacdcldcvch3.vch.ca', 'phsacdcldcvch4.vch.ca', 'phsacdcldcvrhb3.main.vrhb.local', 'phsacdcldcvrhb4.main.vrhb.local']}

    perf_bucket_model = apps.get_model('ldap_probe', 'ADNodePerfBucket')

    for bucket_name in bucket_lists:
        bucket = perf_bucket_model.objects.get(name=bucket_name)
        for domain_controller_name in bucket_lists[bucket_name]:
            update_dc_with_bucket(apps, domain_controller_name, bucket)

    # Set all domain controllers not listed here to the default
    default_bucket = perf_bucket_model.objects.get(is_default=True)

    non_orion_node_model = apps.get_model('ldap_probe', 'NonOrionADNode')
    orion_node_model = apps.get_model('ldap_probe', 'OrionADNode')

    non_orion_node_model.objects.filter(performance_bucket=None)\
        .update(performance_bucket=default_bucket)
    orion_node_model.objects.filter(performance_bucket=None)\
        .update(performance_bucket=default_bucket)


class Migration(migrations.Migration):
    replaces = [
        ('ldap_probe', '0007_populate_ldap_errors'),
        ('ldap_probe', '0041_add_perf_buckets'),
        ('ldap_probe', '0044_reset_performance_buckets'),
        ('ldap_probe', '0045_add_dcs_to_buckets'),
    ]

    dependencies = [
        ('ldap_probe', '0046_0001_to_0043_model'),
        ('dynamic_preferences', '0004_move_user_model'),
    ]

    operations = [
        migrations.RunPython(populate_ldap_cred_default,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(populate_ac_orion_nodes,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(populate_ac_nodes,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(populate_ldap_errors,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_new_perf_buckets,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_dcs_to_buckets,
                             reverse_code=migrations.RunPython.noop),
    ]
