# Generated by Django 2.1.4 on 2019-06-20 20:19
from django.contrib.auth.models import User, UserManager

from django.db import migrations


def add_subscriptions(apps, schema_editor):
    to_emails = ('TSCST-Support@hssbc.ca,TSCST-Shiftmanager@hssbc.ca')

    subscriptions = [
        {
            'subscription': 'Exchange Client Site',
            'enabled': True,
            'emails_list': to_emails,
            'from_email': 'TSCST-Support@hssbc.ca',
            'template_dir': 'mail_collector/templates',
            'template_name': 'exc_serv_alert_all',
            'template_prefix': 'email/',
            'email_subject':
                'Exchange client sites not been tested over the last',
            'alternate_email_subject': 'All Exchange client sites are up',
            'headers': ('site,winlogbeathost__excgh_last_seen'),
        },
        {
            'subscription': 'Exchange Client Bot',
            'enabled': True,
            'emails_list': to_emails,
            'from_email': 'TSCST-Support@hssbc.ca',
            'template_dir': 'mail_collector/templates',
            'template_name': 'exc_serv_alert_all',
            'template_prefix': 'email/',
            'email_subject':
            'Site where email services verification failed',
            'alternate_email_subject':
            'Email services are working on all sites',
            'headers': ('host_name,site__site,excgh_last_seen'),
        },
    ]

    subscription_model = apps.get_model('ssl_cert_tracker', 'subscription')

    user = User.objects.filter(is_superuser=True)
    if user.exists():
        user = user.first()
    else:
        user = User.objects.create(
            username='soc_su', email='soc_su@phsa.ca',
            password='soc_su_password', is_active=True, is_staff=True,
            is_superuser=True)
        user.set_password('soc_su_password')
        user.save()

    for subscription in subscriptions:
        subscription.update(dict(created_by_id=user.id, updated_by_id=user.id))
        subscription_instance = subscription_model(**subscription)
        subscription_instance.save()


class Migration(migrations.Migration):

    dependencies = [
        ('mail_collector', '0017_add_mail_function_subscriptions'),
    ]

    operations = [
        migrations.RunPython(add_subscriptions,
                             reverse_code=migrations.RunPython.noop)
    ]
