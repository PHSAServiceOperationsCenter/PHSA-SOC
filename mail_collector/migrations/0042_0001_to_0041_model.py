# Generated by Django 2.2.6 on 2020-01-17 18:25

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import p_soc_auto_base.utils
import re


class Migration(migrations.Migration):
    replaces = [
        ('mail_collector', '0001_initial'),
        ('mail_collector', '0002_auto_20190528_1258'),
        ('mail_collector', '0003_auto_20190529_1437'),
        ('mail_collector', '0004_auto_20190530_1105'),
        ('mail_collector', '0005_auto_20190530_1157'),
        ('mail_collector', '0006_auto_20190603_1059'),
        ('mail_collector', '0007_auto_20190603_1545'),
        ('mail_collector', '0008_auto_20190606_1057'),
        ('mail_collector', '0009_auto_20190606_1436'),
        ('mail_collector', '0010_auto_20190610_1145'),
        ('mail_collector', '0011_auto_20190610_1151'),
        ('mail_collector', '0012_auto_20190611_1055'),
        ('mail_collector', '0013_auto_20190612_1533'),
        ('mail_collector', '0014_mailbetweendomains_status'),
        ('mail_collector', '0015_auto_20190617_1023'),
        ('mail_collector', '0021_auto_20190627_1213'),
        ('mail_collector', '0031_auto_20190802_0935'),
        ('mail_collector', '0032_auto_20190806_1012'),
        ('mail_collector', '0033_auto_20190806_1017'),
        ('mail_collector', '0034_auto_20190806_1409'),
        ('mail_collector', '0038_auto_20190820_1023'),
        ('mail_collector', '0041_auto_20191113_1050'),
    ]

    dependencies = [
        ('citrus_borg', '0028_0001_to_0027_initial_model'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DomainAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_index=True, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('domain', models.CharField(db_index=True, max_length=15, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='windows domain')),
                ('username', models.CharField(db_index=True, max_length=64, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='domain username')),
                ('password', models.CharField(max_length=64, verbose_name='password')),
                ('is_default', models.BooleanField(db_index=True, default=False, verbose_name='default windows account')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mail_collector_domainaccount_created_by_related', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mail_collector_domainaccount_updated_by_related', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Domain Account',
                'verbose_name_plural': 'Domain Accounts',
            },
        ),
        migrations.CreateModel(
            name='ExchangeAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_index=True, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('smtp_address', models.EmailField(db_index=True, help_text='Exchange Account', max_length=253, unique=True, verbose_name='SMTP address')),
                ('exchange_autodiscover', models.BooleanField(default=True, verbose_name='use exchange auto discovery')),
                ('autodiscover_server', models.CharField(blank=True, max_length=253, null=True, verbose_name='Exchange discovery server')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mail_collector_exchangeaccount_created_by_related', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('domain_account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mail_collector.DomainAccount', verbose_name='Domain Account')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mail_collector_exchangeaccount_updated_by_related', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Exchange Account',
                'verbose_name_plural': 'Exchange Accounts',
            },
        ),
        migrations.CreateModel(
            name='ExchangeServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exchange_server', models.CharField(db_index=True, max_length=16, unique=True, verbose_name='Exchange Server')),
                ('last_connection', models.DateTimeField(blank=True, db_index=True, help_text='Last time an account connected successfully to this server', null=True, verbose_name='Last Connected')),
                ('last_send', models.DateTimeField(blank=True, db_index=True, help_text='Last time a message was send via this server', null=True, verbose_name='Last Send')),
                ('last_inbox_access', models.DateTimeField(blank=True, db_index=True, help_text='Can also be considered as last received', null=True, verbose_name='Last Inbox Access')),
                ('last_updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Last Updated')),
                ('enabled', models.BooleanField(db_index=True, default=True, verbose_name='Enabled')),
                ('last_updated_from_node_id', models.BigIntegerField(db_index=True, default=0, help_text='this is the value in this field to SQL join the Orion server database', verbose_name='Orion Node Id')),
            ],
            options={
                'verbose_name': 'Exchange Server',
                'verbose_name_plural': 'Exchange Servers',
                'ordering': ['-last_updated'],
                'get_latest_by': '-last_updated',
            },
        ),
        migrations.CreateModel(
            name='MailBotLogEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_group_id', models.CharField(db_index=True, help_text='Identifier for a group of related exchange client events', max_length=128, verbose_name='Session Id')),
                ('uuid', models.UUIDField(db_index=True, default=p_soc_auto_base.utils.get_uuid, unique=True, verbose_name='UUID')),
                ('event_status', models.CharField(db_index=True, default='TBD', help_text='Status reported by the mail borg client for this event', max_length=16, verbose_name='Status')),
                ('event_type', models.CharField(db_index=True, default='TBD', help_text='Type of this event', max_length=32, verbose_name='Type')),
                ('event_type_sort', models.IntegerField(db_index=True, default=999, help_text='connect (1) before sent (2) before received (3) and so on', verbose_name='Sort Value for Type')),
                ('event_message', models.TextField(blank=True, null=True, verbose_name='Message')),
                ('event_exception', models.TextField(blank=True, null=True, verbose_name='Exception')),
                ('event_body', models.TextField(blank=True, help_text='The full event information as collected from the wire', null=True, verbose_name='Raw Data')),
                ('is_expired', models.BooleanField(db_index=True, default=False, verbose_name='event has expired')),
                ('mail_account', models.TextField(blank=True, help_text='Usually DOMAIN\\user, the primaty email address', null=True, verbose_name='Exchange Account Associated With This Event')),
                ('event_registered_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Database date/time stamp for the registration of this event to the application', verbose_name='Event Registered on')),
                ('source_host', models.ForeignKey(limit_choices_to={'excgh_last_seen__isnull': False}, on_delete=django.db.models.deletion.PROTECT, to='citrus_borg.WinlogbeatHost', verbose_name='Event Source Host')),
            ],
            options={
                'verbose_name': 'Mail Monitoring Event',
                'verbose_name_plural': 'Mail Monitoring Events',
                'ordering': ['-event_group_id', 'mail_account', 'event_type_sort'],
                'get_latest_by': '-event_registered_on',
            },
        ),
        migrations.CreateModel(
            name='MailHost',
            fields=[
            ],
            options={
                'verbose_name': 'Exchange Monitoring Bot',
                'verbose_name_plural': 'Exchange Monitoring Bots',
                'ordering': ['-excgh_last_seen'],
                'get_latest_by': '-excgh_last_seen',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('citrus_borg.winlogbeathost',),
        ),
        migrations.CreateModel(
            name='MailSite',
            fields=[
            ],
            options={
                'verbose_name': 'Exchange Monitoring Site',
                'verbose_name_plural': 'Exchange Monitoring Sites',
                'ordering': ['-winlogbeathost__excgh_last_seen'],
                'get_latest_by': '-winlogbeathost__excgh_last_seen',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('citrus_borg.borgsite',),
        ),
        migrations.CreateModel(
            name='MailBotMessage',
            fields=[
                ('mail_message_identifier', models.CharField(db_index=True, max_length=36, verbose_name='Exchange Message Identifier')),
                ('sent_from', models.TextField(blank=True, null=True, verbose_name='Sent From')),
                ('sent_to', models.TextField(blank=True, null=True, verbose_name='Sent To')),
                ('received_from', models.TextField(blank=True, null=True, verbose_name='Received From')),
                ('received_by', models.TextField(blank=True, null=True, verbose_name='Received By')),
                ('mail_message_created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created')),
                ('mail_message_sent', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Sent')),
                ('mail_message_received', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Received')),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='mail_collector.MailBotLogEvent')),
            ],
            options={
                'verbose_name': 'Mail Monitoring Message',
                'verbose_name_plural': 'Mail Monitoring Messages',
                'ordering': ['-event__event_group_id', 'sent_from', 'event__event_type_sort'],
                'get_latest_by': '-event__event_registered_on',
            },
        ),
        migrations.CreateModel(
            name='WitnessEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_index=True, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('smtp_address', models.EmailField(db_index=True, help_text='Exchange Account', max_length=253, unique=True, verbose_name='SMTP address')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mail_collector_witnessemail_created_by_related', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mail_collector_witnessemail_updated_by_related', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Witness Email Address',
            },
        ),
        migrations.CreateModel(
            name='MailBetweenDomains',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_domain', models.CharField(db_index=True, max_length=63, verbose_name='Sent from email domain')),
                ('to_domain', models.CharField(db_index=True, max_length=63, verbose_name='Received by email domain')),
                ('is_expired', models.BooleanField(db_index=True, default=False, verbose_name='event has expired')),
                ('enabled', models.BooleanField(db_index=True, default=True, verbose_name='Enabled')),
                ('last_verified', models.DateTimeField(db_index=True, verbose_name='Last Verified')),
                ('status', models.CharField(db_index=True, default='TBD', max_length=16, verbose_name='Status')),
                ('last_updated_from_node_id', models.BigIntegerField(db_index=True, default=0, help_text='this is the value in this field to SQL join the Orion server database', verbose_name='Orion Node Id')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mail_collector.MailSite', verbose_name='Verified from mail site')),
            ],
            options={
                'verbose_name': 'Domain to Domain Mail Verification',
                'verbose_name_plural': 'Domain to Domain Mail Verifications',
                'ordering': ['from_domain', 'to_domain', '-last_verified'],
                'get_latest_by': '-last_verified',
            },
        ),
        migrations.CreateModel(
            name='ExchangeDatabase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('database', models.CharField(db_index=True, max_length=16, unique=True, verbose_name='Database')),
                ('last_access', models.DateTimeField(db_index=True, verbose_name='Last Access')),
                ('enabled', models.BooleanField(db_index=True, default=True, verbose_name='Enabled')),
                ('last_updated_from_node_id', models.BigIntegerField(db_index=True, default=0, help_text='this is the value in this field to SQL join the Orion server database', verbose_name='Orion Node Id')),
                ('exchange_server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mail_collector.ExchangeServer', verbose_name='Exchange Server')),
            ],
            options={
                'verbose_name': 'Exchange Database',
                'verbose_name_plural': 'Exchange Databases',
                'ordering': ['-last_access'],
                'get_latest_by': '-last_access',
            },
        ),
        migrations.CreateModel(
            name='ExchangeConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='object creation time stamp', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_index=True, help_text='object update time stamp', verbose_name='updated on')),
                ('enabled', models.BooleanField(db_index=True, default=True, help_text='if this field is checked out, the row will always be excluded from any active operation', verbose_name='enabled')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('config_name', models.CharField(db_index=True, max_length=64, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='name')),
                ('is_default', models.BooleanField(db_index=True, default=False, verbose_name='is default?')),
                ('debug', models.BooleanField(default=False, help_text='In debug mode the client will not clean up old messages', verbose_name='Debug')),
                ('autorun', models.BooleanField(default=True, help_text='When enabled, the client will execute mail checks automatically', verbose_name='Auto run')),
                ('mail_check_period', models.DurationField(default=datetime.timedelta(0, 3600), verbose_name='check email every')),
                ('ascii_address', models.BooleanField(default=True, help_text='Format internationalized DNS domains to ASCII. See https://tools.ietf.org/html/rfc5891 ', verbose_name='Force ASCII MX')),
                ('utf8_address', models.BooleanField(default=False, verbose_name='Allow UTF8 email address')),
                ('check_mx', models.BooleanField(default=True, help_text='Ask the DNS server if the email domain is connectable', verbose_name='Verify MX connectivity')),
                ('check_mx_timeout', models.DurationField(default=datetime.timedelta(0, 5), verbose_name='Verify MX timeout')),
                ('min_wait_receive', models.DurationField(default=datetime.timedelta(0, 3), help_text='The Exchange client is using a `Retry Pattern With Exponential Back-off` mechanism when sending a message or when checking for a received message. This field contains the minimum wait time before retrying such and action', verbose_name='Minimum wait when retrying an Exchange action')),
                ('backoff_factor', models.IntegerField(default=3, help_text='The Exchange client is using a `Retry Pattern With Exponential Back-off` mechanism when sending a message or when checking for a received message. This field contains the back-off factor used when retrying such and action', verbose_name='Back-off factor for retrying an Exchange action')),
                ('max_wait_receive', models.DurationField(default=datetime.timedelta(0, 120), help_text='The Exchange client is using a `Retry Pattern With Exponential Back-off` mechanism when sending a message or when checking for a received message. This field contains the maximum time to wait before giving up on retrying such and action', verbose_name='Maximum time to wait before giving up on an Exchange action')),
                ('tags', models.TextField(blank=True, null=True, verbose_name='Optional tags')),
                ('email_subject', models.CharField(default='exchange monitoring message', max_length=78, verbose_name='Email Subject')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mail_collector_exchangeconfiguration_created_by_related', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('exchange_accounts', models.ManyToManyField(limit_choices_to={'enabled': True}, to='mail_collector.ExchangeAccount', verbose_name='Exchange Accounts')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mail_collector_exchangeconfiguration_updated_by_related', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
                ('witness_addresses', models.ManyToManyField(blank=True, limit_choices_to={'enabled': True}, to='mail_collector.WitnessEmail', verbose_name='Witness addresses')),
            ],
            options={
                'verbose_name': 'Exchange Monitoring Client Configuration',
            },
        ),
        migrations.AddIndex(
            model_name='mailbetweendomains',
            index=models.Index(fields=['site', 'from_domain', 'to_domain'], name='mailbetweendomains_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mailbetweendomains',
            unique_together={('site', 'from_domain', 'to_domain')},
        ),
        migrations.AddIndex(
            model_name='domainaccount',
            index=models.Index(fields=['domain', 'username'], name='mail_collec_domain_cdac27_idx'),
        ),
        migrations.AddConstraint(
            model_name='domainaccount',
            constraint=models.UniqueConstraint(fields=('domain', 'username'), name='unique_account'),
        ),
    ]
