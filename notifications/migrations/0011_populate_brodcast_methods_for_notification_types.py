# Generated by Django 2.1.1 on 2018-10-03 19:48

from django.db import migrations
from django.conf import settings
from django.contrib.auth.models import User


def populate_notification_type_broadcast_methods(apps, schema_editor):
    notification_type_model = apps.get_model(
        'notifications', 'NotificationType')
    broadcast_model = apps.get_model('notifications', 'Broadcast')

    notification_type_broadcast_model = apps.get_model(
        'notifications', 'NotificationTypeBroadcast')

    user = User.objects.filter(username=settings.NOTIFICATIONS_SERVICE_USER)
    if user.exists():
        user = user.get()
    else:
        user = User.objects.create_user(settings.NOTIFICATIONS_SERVICE_USER)

    for notification_type in notification_type_model.objects.all():
        if notification_type.notification_type in ['internal']:
            broadcast = broadcast_model.objects.get(broadcast='log')
            notification_type_broadcast = notification_type_broadcast_model()
            notification_type_broadcast.notification_type = notification_type
            notification_type_broadcast.broadcast = broadcast
            notification_type_broadcast.created_by_id = user.id
            notification_type_broadcast.updated_by_id = user.id
            notification_type_broadcast.save()
            continue

        elif notification_type.notification_type in ['ssl_rule']:
            for broadcast in broadcast_model.objects.\
                    filter(broadcast__in=['email', 'orion_alert']):
                notification_type_broadcast =\
                    notification_type_broadcast_model()
                notification_type_broadcast.notification_type = \
                    notification_type
                notification_type_broadcast.broadcast = broadcast
                notification_type_broadcast.created_by_id = user.id
                notification_type_broadcast.updated_by_id = user.id
                notification_type_broadcast.save()
            continue

        else:
            for broadcast in broadcast_model.objects.all():
                notification_type_broadcast = notification_type_broadcast_model()
                notification_type_broadcast.notification_type = notification_type
                notification_type_broadcast.broadcast = broadcast
                notification_type_broadcast.created_by_id = user.id
                notification_type_broadcast.updated_by_id = user.id
                notification_type_broadcast.save()


def truncate(apps, schema_editor):
    model = apps.get_model('notifications', 'NotificationTypeBroadcast')

    model.objects.all().delete(())


class Migration(migrations.Migration):

    dependencies = [
        ('notifications', '0010_notificationtype_expires_automatically'),
    ]

    operations = [
        migrations.RunPython(populate_notification_type_broadcast_methods,
                             reverse_code=truncate)
    ]
