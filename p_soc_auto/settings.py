"""
p_soc_auto.settings
-------------------

Django settings for the :ref:`SOC Automation Server`

Originally generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
`Django settings <https://docs.djangoproject.com/en/2.2/topics/settings/>`__

For the full list of settings and their values, see
`Settings <https://docs.djangoproject.com/en/2.2/ref/settings/>`__


:copyright:

    Copyright 2018 - 2019 Provincial Health Service Authority
    of British Columbia

:contact:    serban.teodorescu@phsa.ca

:updated:    Oct. 29, 2019

"""

import os
import pathlib

from django.utils import timezone
from kombu import Queue, Exchange

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
"""
Build paths inside the project like this: os.path.join(BASE_DIR, ...)

All the directories referenced in this project start from the location of
this file
"""

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '5u7)@@#z0yr-$4q#enfc&20a6u6u-h1_nr^(z%fkqu3dx+y6ji'


DEBUG = True
"""
Enable or disable debugging information

:SECURITY WARNING:

    don't run with debug turned on in production!
"""

ALLOWED_HOSTS = ['*', ]

ADMINS = [('Serban Teodorescu', 'serban.teodorescu@phsa.ca'), ]

LOG_DIR = os.path.join(BASE_DIR, 'logs')
"""
log file will be placed under this directory
"""
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format':
            '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'django_log': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'django.log'),
            'formatter': 'verbose',
            'filters': ['require_debug_true']
        },
        'ssl_cert_tracker_log': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'ssl_cert_tracker.log'),
            'formatter': 'verbose',
            'filters': ['require_debug_true']
        },

        #======================================================================
        # 'orion_flash_log': {
        #     'level': 'DEBUG',
        #     'class': 'logging.FileHandler',
        #     'filename': os.path.join(LOG_DIR, 'orion_flash.log'),
        #     'formatter': 'verbose',
        #     'filters': ['require_debug_true']
        # },
        #======================================================================

        'citrus_borg_log': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'citrus_borg.log'),
            'formatter': 'verbose',
            'filters': ['require_debug_true']
        },
        'mail_collector_log': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'mail_collector.log'),
            'formatter': 'verbose',
            'filters': ['require_debug_true']
        },
        'orion_integration_log': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'orion_integration.log'),
            'formatter': 'verbose',
            'filters': ['require_debug_true']
        },
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['django_log'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'ssl_cert_tracker': {
            'handlers': ['ssl_cert_tracker_log', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },

        #======================================================================
        # 'orion_flash': {
        #     'handlers': ['orion_flash_log', 'console'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        #======================================================================

        'citrus_borg': {
            'handlers': ['citrus_borg_log', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'mail_collector': {
            'handlers': ['mail_collector_log', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'orion_integration': {
            'handlers': ['orion_integration_log', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
"""
detailed logging configuration
"""

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
        'LOCATION': [
            '127.0.0.1:11211',
        ]
    }
}
"""
memcached connection configuration
"""

# Application definition
INSTALLED_APPS = [
    'mail_collector.apps.MailCollectorConfig',
    'orion_integration.apps.OrionIntegrationConfig',
    'p_soc_auto_base.apps.PSocAutoBaseConfig',
    'ssl_cert_tracker.apps.SslCertificatesConfig',
    'citrus_borg.apps.CitrusBorgConfig',
    #    'orion_flash.apps.OrionFlashConfig',
    #    'task_journal.apps.TaskJournalConfig',
    'rest_framework',
    'django_template_check',
    'django_mysql',
    'rangefilter',
    'templated_email',
    'timedeltatemplatefilter',
    'dynamic_preferences',
    'grappelli.dashboard',
    'grappelli',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.admindocs.middleware.XViewMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'p_soc_auto.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'dynamic_preferences.processors.global_preferences',
            ],
        },
    },
]

WSGI_APPLICATION = 'p_soc_auto.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'phsa_database',
        'HOST': '',
        'PASSWORD': 'phsa_db_password',
        'USER': 'phsa_db_user',
        'OPTIONS': {
            # Tell MySQLdb to connect with 'utf8mb4' character set
            'charset': 'utf8mb4',
        },
    },

    #=========================================================================
    #     'orion_aux_db': {
    #         'ENGINE': 'sql_server.pyodbc',
    #         'NAME': 'orion_aux_db',
    #         'USER': 'orion_aux_db_user',
    #         'PASSWORD': 'orion_aux_db_password',
    #         #	'SA_PASSWORD': "orion_aux_db_password123',
    #         'HOST': '10.248.211.70',
    #         # 'HOST': '10.66.6.9',
    #         'PORT': '',
    #
    #         'OPTIONS': {
    #             'driver': 'ODBC Driver 17 for SQL Server',
    #         },
    #     },
    #=========================================================================

}
"""
connection information for databases
"""

# DATABASE_ROUTERS = ['orion_flash.router.OrionAuxRouter', ]

SILENCED_SYSTEM_CHECKS = ['django_mysql.W001', 'django_mysql.W002', ]
# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
"""I18N"""

TIME_ZONE = 'America/Vancouver'
"""time zone"""

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
MEDIA_URL = '/media/'

CSV_MEDIA_ROOT = os.path.join(MEDIA_ROOT, 'csv/')
"""
``csv`` files created as attachments for various email notifications will
be placed under this directory
"""
pathlib.Path(CSV_MEDIA_ROOT).mkdir(parents=True, exist_ok=True)
# note that this will not work in Python <3.5

ORION_HOSTNAME = 'orion.vch.ca'
"""
default network address for the `SolarWinds Orion server
<https://www.solarwinds.com/solutions/orion>`__

This variable is exposed by the :attr:`citrus_borg.dynamic_preferences_registry.OrionServer.default`
attribute of the :class:`citrus_borg.dynamic_preferences_registry.OrionServer`
dynamic preference.

We recommend that the `SolarWinds Orion server
<https://www.solarwinds.com/solutions/orion>`__ network address be configured
from the `Orion Server Host Name or IP Address
<../../../admin/dynamic_preferences/globalpreferencemodel/?q=orion_hostname&o=2>`__
page and be accessed using the
:func:`citrus_borg.dynamic_preferences_registry.get_preference`
function as below:

.. ipython::

    In [1]: from citrus_borg.dynamic_preferences_registry import get_preference

    In [2]: get_preference('orionserverconn__orion_hostname')
    Out[2]: 'orion.vch.ca'

    In [3]:

"""

ORION_ENTITY_URL = 'https://orion.vch.ca'
"""
default URL path for linking Orion nodes as defined in this project to the
node definitions on the `SolarWinds Orion server
<https://www.solarwinds.com/solutions/orion>`__

This variable is exposed by the :attr:`citrus_borg.dynamic_preferences_registry.OrionServerUrl.default`
attribute of the :class:`citrus_borg.dynamic_preferences_registry.OrionServer`
dynamic preference.

Configure the URL path for the `SolarWinds Orion server
<https://www.solarwinds.com/solutions/orion>`__ from the `Orion Server Root URL
<../../../admin/dynamic_preferences/globalpreferencemodel/?q=orion_server_url&o=2>`__.

Access this value using the
:func:`citrus_borg.dynamic_preferences_registry.get_preference`
function as below:

.. ipython::

    In [3]: get_preference('orionserverconn__orion_server_url')
    Out[3]: 'https://orion.vch.ca'

    In [4]:

"""

ORION_URL = 'https://orion.vch.ca:17778/SolarWinds/InformationService/v3/Json'
"""
default REST URL exposed by the `SolarWinds Orion server
<https://www.solarwinds.com/solutions/orion>`__

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.OrionServerRestUrl`

Configurable from `Orion Server REST API root URL
<../../../admin/dynamic_preferences/globalpreferencemodel/?q=orion_rest_url&o=2>`__

Accessible using the ``orionserverconn__orion_rest_url`` key
"""

ORION_USER = 'CSTmonitor'
"""
default user for accessing the `SolarWinds Orion server
<https://www.solarwinds.com/solutions/orion>`__

Can be used for both Web console and REST access

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.OrionServerUser`

Configurable from `Orion Server User Name
<../../../admin/dynamic_preferences/globalpreferencemodel/?q=orion_user&o=2>`__

Accessible using the ``orionserverconn__orion_user`` key
"""

ORION_PASSWORD = 'phsa123'
"""
default user for accessing the `SolarWinds Orion server
<https://www.solarwinds.com/solutions/orion>`__

Can be used for both Web console and REST access

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.OrionServerPassword`

Configurable from `Orion Server User Name
<../../../admin/dynamic_preferences/globalpreferencemodel/?q=orion_password&o=2>`__

Accessible using the ``orionserverconn__orion_password`` key
"""

ORION_VERIFY_SSL_CERT = False
"""
verify the SSL certificate on the `SolarWinds Orion server
<https://www.solarwinds.com/solutions/orion>`__ when issuing ``REST`` requests

.. todo::

    Create dynamic preference to match this setting and use it where needed
"""

ORION_TIMEOUT = (10.0, 22.0)
"""
timeouts used when accessing `REST
<https://en.wikipedia.org/wiki/Representational_state_transfer>`__ end points
on the `SolarWinds Orion server <https://www.solarwinds.com/solutions/orion>`__

The values in the tuple are in seconds; the first value is the connection
timeout, the second one is the read timeout.

This settings is "configurable" from the
:class:`citrus_borg.dynamic_preferences_registry.OrionServerConnectionTimeout`
and
:class:`citrus_borg.dynamic_preferences_registry.OrionServerReadTimeout`

The access keys when using the
:func:`citrus_borg.dynamic_preferences_registry.get_preference` are
``orionserverconn__orion_con_timeout`` and
``orionserverconn__orion_read_timeout`` respectively.
"""

ORION_RETRY = 3
"""
retry ``REST`` requests to the `SolarWinds Orion server
<https://www.solarwinds.com/solutions/orion>`__

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.OrionServerRetry`

Configurable from `Orion Server User Name
<../../../admin/dynamic_preferences/globalpreferencemodel/?q=orion_retry&o=2>`__

Accessible using the ``orionserverconn__orion_retry`` key

"""

ORION_BACKOFF_FACTOR = 0.3
"""
backoff factor for ``REST`` requests to the `SolarWinds Orion server
<https://www.solarwinds.com/solutions/orion>`__

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.OrionServerRetryBackoff`

Configurable from `Orion Server User Name
<../../../admin/dynamic_preferences/globalpreferencemodel/?q=orion_backoff_factor&o=2>`__

Accessible using the ``orionserverconn__orion_retry`` key

"""

# celery settings (use namespace='CELERY')
CELERY_BROKER_URL = 'amqp://guest:guest@localhost//'
""":ref:`RabbitMQ server` access URL"""

CELERY_ACCEPT_CONTENT = ['json', 'pickle']
"""
Acceptable serializers for `Celery content
<https://docs.celeryproject.org/en/latest/userguide/configuration.html#accept-content>`__

The ``Celery`` documentation recommends against using  the `pickle
<https://docs.python.org/3/library/pickle.html#module-pickle>`__ serializer
because of the security risks associated with using ``pickled`` objects
over the network.
In our case, we need the ``pickle`` serializer because some ``Celery``
messages are containing :mod:`datetime` objects that cannot be serialized to
``JSON`` with the defaults offered by the :mod:`json` module.
The security risks will be mitigated once we enable ``TLS`` connections
between the :ref:`SOC Automation server` and the :ref:`RabbitMQ server`.
"""

CELERY_RESULT_BACKEND = 'rpc://'

CELERY_RESULT_PERSISTENT = False
"""do not persist ``Celery`` task execution results"""

CELERY_TASK_SERIALIZER = 'json'
"""
Serialize `Celery tasks
<https://docs.celeryproject.org/en/latest/userguide/tasks.html>`__
to ``JSON``

This is the preferred settingfor security purposes. See the discussion for
:attr:`CELERY_ACCEPT_CONTENT`. Note that we are overriding this setting for
tasks with arguments that cannot be serialized to ``JSON`` like
:class:`datetime.datetime` objects or :class:`Django querysets
<django.db.models.QuerySet>`.
"""

CELERY_QUEUES = (
    Queue('email', Exchange('email'), routing_key='email'),
    Queue('orion', Exchange('orion'), routing_key='orion'),
    Queue('nmap', Exchange('nmap'), routing_key='nmap'),
    Queue('ssl', Exchange('ssl'), routing_key='ssl'),
    Queue('shared', Exchange('shared'), routing_key='shared'),
    Queue('citrus_borg', Exchange('the_borg'), routing_key='citrus_borg'),
    Queue('borg_chat', Exchange('the_borg'), routing_key='borg_chat'),
    #    Queue('orion_flash', Exchange('orion_flash'), routing_key='orion_flash'),
    Queue('mail_collector', Exchange('mail_collector'),
          routing_key='mail_collector'),
)
"""
celery queues
"""

CELERY_DEFAULT_QUEUE = 'shared'
CELERY_DEFAULT_EXCHANGE = 'shared'
CELERY_DEFAULT_ROUTING_KEY = 'shared'

# event consumer settings (use namespace='EVENT_CONSUMER'
CELERY_USE_DJANGO = True
CELERY_EXCHANGES = {
    'default': {'name': 'logstash', 'type': 'topic', },
}
"""
celery exchanges
"""

# common email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
EMAIL_FILE_PATH = '/tmp'

# ===========================================================================
# email settings for PHSA Exchange relay
EMAIL_HOST = 'smtp.healthbc.org'
"""
SMTP relay address

The :ref:`SOC Automation Server` will use this SMTP server to deliver emails
via the `PHSA`` ``Exchange`` infrastructure.

:Note:

    The address of the :ref:`SOC Automation Server` must be white-listed on
    the SMTP relay server.

.. todo::

    This and all the other email related ``attributes`` must be enhanced to
    make use of ``dynamic preferences``
"""

EMAIL_USE_TLS = False
"""use ``TLS`` when connecting to the SMTP relay?"""

EMAIL_USE_SSL = False
"""
use ``SSL`` when connecting to the SMTP relay?

.. todo::

    There is no encryption on connections to the SMTP relay. I don't know
    who is managing that server but enabling ``TLS`` or ``SSL`` strikes me
    as a very good idea. See `Zero Trust Security
    <https://www.cloudflare.com/learning/security/glossary/what-is-zero-trust/>`__.

"""

EMAIL_PORT = 25
"""SMTP relay connection port"""

EMAIL_HOST_USER = ''
"""SMTP relay user name"""

EMAIL_HOST_PASSWORD = ''
"""SMTP relay user password"""

# ===========================================================================

DEFAULT_FROM_EMAIL = 'TSCST-Support@hssbc.ca'
"""
default address used in the ``FROM:`` field for emails originating on the
:ref:`SOC Automation Server`

.. todo::

    Make it a ``dynamic preference``.
"""

DEFAULT_EMAIL_REPLY_TO = DEFAULT_FROM_EMAIL

#=========================================================================
# # ==========================================================================
# # email settings for gmail
# # these will not work from 10.1.80.0
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_USE_TLS = True
# EMAIL_USE_SSL = False
# EMAIL_PORT = 587
# EMAIL_HOST_USER = 'phsadev@gmail.com'
# EMAIL_HOST_PASSWORD = 'gaukscylgzzlavva'
# # ===========================================================================
#=========================================================================

# server settings: use them to build URL's
SERVER_PORT = '8080'
"""
the TCP port used by the :ref:`SOC Automation server` in production

This value is used for programmatically building URLS in various modules
"""

SERVER_PROTO = 'http'
"""
the protocol used by the :ref:`SOC Automation server` in production

This value is used for programmatically building URLS in various modules
"""

# settings specific to the citrus_borg application
CITRUS_BORG_SERVICE_USER = 'citrus-borg'
"""
default value for the ``Django`` service user for maintaining information
about remote ``Citrix`` and/or ``Exchange`` bots in
:class:`django.db.models.Model` models

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.ServiceUser`

"""

CITRUS_BORG_DEAD_BOT_AFTER = timezone.timedelta(minutes=10)
"""
default value for the interval used to evaluate alerts about remote bots
not communicating with the :ref:`SOC Automation Server`

:Note:

    Such alerts cannot reveal the reason for the lack of communication.

    False positives will occur when there is a problem with the :ref:`Data
    Collection` mechanisms

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.BotAlertAfter`

"""

CITRUS_BORG_DEAD_SITE_AFTER = timezone.timedelta(minutes=10)
"""
default value for the interval used when evaluating alerts about remote sites
not communicating with the :ref:`SOC Automation Server`

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.SiteAlertAfter`

"""
CITRUS_BORG_DEAD_BROKER_AFTER = timezone.timedelta(hours=24)
"""
default value for the interval used when evaluating alerts about ``Citrix``
session hosts not communicating with remote ``Citrix`` bots

:Note:

    This is not a relevant alert under the current ``Cerner CST `` ``Citrix``
    deployments.

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.SessionHostAlertAfter`

"""

CITRUS_BORG_NOT_FORGOTTEN_UNTIL_AFTER = timezone.timedelta(hours=72)
"""
default interval for assembling reports about ``Citrix`` entities that cannot
communicate

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.NodeForgottenAfter`

"""

CITRUS_BORG_IGNORE_EVENTS_OLDER_THAN = timezone.timedelta(hours=72)
"""
default value for the **ignore events older than** interval applying to
all ``Citrix`` events

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.IgnoreEvents`

"""

CITRUS_BORG_EVENTS_EXPIRE_AFTER = timezone.timedelta(hours=72)
"""
default value for how old a ``Citrix`` event has to be before it is considered
amd marked as ``expired``

``Expired`` events are ignored bu the :ref:`SOC Automation Server`.

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.ExpireEvents`

"""

CITRUS_BORG_DELETE_EXPIRED = True
"""
delete ``expired`` ``Citrix`` events?

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.DeleteExpiredEvents`
"""

CITRUS_BORG_FAILED_LOGON_ALERT_INTERVAL = timezone.timedelta(minutes=10)
"""
default value for the interval used in evaluating the alert condition for
failed ``Citrix logon`` events

Exposed as a dynamic preference by
:class:`citrus_borg.dynamic_preferences_registry.FailedLogonAlertInterval`

"""

CITRUS_BORG_FAILED_LOGON_ALERT_THRESHOLD = 2
"""
default threshold for the number of failed ``Citrix logon`` within the
interval exposed by
:class:`citrus_borg.dynamic_preferences_registry.FailedLogonAlertInterval`

The alert is triggered if the number of failed ``Citrix logon`` events is
greater than or equal to the this threshold during the evaluation interval

Exposed by
:class:`citrus_borg.dynamic_preferences_registry.FailedLogonAlertThreshold`

"""

CITRUS_BORG_SITE_UX_REPORTING_PERIOD = timezone.timedelta(hours=24)
"""
default interval used when assembling reports about the user experience, i.e.
performance or lack thereof, provided by a ``Citrix Application Server`` as
measured by the ``ControlUp`` application

Exposed by
:class:`citrus_borg.dynamic_preferences_registry.UxReportingPeriod`

"""

CITRUS_BORG_UX_ALERT_THRESHOLD = timezone.timedelta(seconds=10)
"""
default threshold value for alerts related to the ``Citrix`` user experience

These alerts are raised if the ``ControlUp`` application reports ``Citrix``
response times greater than this threshold.

Exposed by
:class:`citrus_borg.dynamic_preferences_registry.UxAlertThreshold`

"""

CITRUS_BORG_UX_ALERT_INTERVAL = timezone.timedelta(minutes=10)
"""
default interval for evaluating the ``Citrix`` user experience

Exposed by
:class:`citrus_borg.dynamic_preferences_registry.UxAlertInterval`
"""

CITRUS_BORG_FAILED_LOGONS_PERIOD = timezone.timedelta(hours=12)
"""
default interval for assembling reports about failed ``Citrix`` logon events

exposed by
:class:`citrus_borg.dynamic_preferences_registry.LogonReportsInterval`

"""

CITRUS_BORG_NO_NEWS_IS_GOOD_NEWS = False
"""
do not send emails when there are no alerts?

exposed by
:class:`citrus_borg.dynamic_preferences_registry.SendNoNews`

"""

DYNAMIC_PREFERENCES = {
    'MANAGER_ATTRIBUTE': 'preferences',
    'REGISTRY_MODULE': 'dynamic_preferences_registry',
    'ADMIN_ENABLE_CHANGELIST_FORM': True,
    'SECTION_KEY_SEPARATOR': '__',
    'ENABLE_CACHE': True,
    'VALIDATE_NAMES': True,
}

# settings specific to nmap
NMAP_SERVICE_USER = 'nmap_user'
"""
service ``Django`` user for creating and/or maintaining instances of
:class:`ssl_cert_tracker.models.SslCertificateIssuer` and
:class:`ssl_cert_tracker.models.SslCertificate` automatically
"""

SSL_PROBE_OPTIONS = '-Pn -p %s --script ssl-cert'
"""
command line switches used by `nmap <https://nmap.org/>`__ for probing
``SSL`` certificates

As shown here, we are running an `NMAP <https://nmap.org/>`__ scan with the
following options:

* `-Pn`

  do not `ping
  <https://en.wikipedia.org/wiki/Ping_(networking_utility)>`__ the target
  
* `-p %`

  this is not a wide scan, just probe the specified port

* `--script ssl-cert`
  
  Use the `ssl-cert <https://nmap.org/nsedoc/scripts/ssl-cert.html>`__ `Lua
  <https://www.lua.org/>`__ script for scanning
  
"""

SSL_DEFAULT_PORT = 443
"""
default network port for ``SSL`` `nmap <https://nmap.org/>`__ probes
"""

EVENT_TYPE_SORT = {
    'unknown': 0,
    'configuration': 1,
    'connection': 2,
    'create': 3,
    'send': 4,
    'receive': 5,
}
"""
Mapping required to provide a custom sort order for event types
"""

GRAPPELLI_INDEX_DASHBOARD = 'p_soc_auto.dashboard.CustomIndexDashboard'
"""
Custom `Django Admin` dashboard class location
"""

if __name__ == '__main__':
    pass
