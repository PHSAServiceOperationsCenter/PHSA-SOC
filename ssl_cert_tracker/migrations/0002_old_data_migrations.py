# Generated by Django 2.1.4 on 2019-04-04 17:45
import pytz

from django.contrib.auth.models import User, UserManager

from django.db import migrations


def add_default_ssl_port(apps, schema_editor):
    port = 443

    model = apps.get_model('ssl_cert_tracker', 'SslProbePort')

    user = User.objects.filter(is_superuser=True)
    if user.exists():
        user = user.first()
    else:
        user = User.objects.create(
            username='soc_su', email='soc_su@phsa.ca',
            password='soc_su_password', is_active=True, is_staff=True,
            is_superuser=True)
        user.set_password('soc_su_password')
        user.save()

    ssl_port = model(port=port, created_by_id=user.id, updated_by_id=user.id)
    ssl_port.save()


def prepare_task_schedules(apps, schema_editor):
    timezone = pytz.timezone('America/Vancouver')

    periodic_tasks = [
        #         ('Dead Citrix monitoring bots alert',
        #          'citrus_borg.tasks.email_dead_borgs_alert', 10, 'minutes',),
        #         ('Dead Citrix client sites alert',
        #          'citrus_borg.tasks.email_dead_sites_alert', 10, 'minutes',),
        #         ('Dead Citrix farm hosts alert',
        #          'citrus_borg.tasks.email_dead_servers_alert', 12, 'hours',),
        #         ('Citrix failed logon alerts',
        #          'citrus_borg.tasks.email_failed_login_alarm', 10, 'minutes',),
    ]

    cron_tasks = [
        ('Bootstrap nmap probes to collect SSL certificates',
         'ssl_cert_tracker.tasks.get_ssl_nodes', '06,18', '08',),
        ('Bootstrap nmap probes to verify SSL certificates',
         'ssl_cert_tracker.tasks.verify_ssl_certificates', '02', '35',)
    ]

    CrontabSchedule = apps.get_model('django_celery_beat', 'CrontabSchedule')
    IntervalSchedule = apps.get_model('django_celery_beat', 'IntervalSchedule')
    PeriodicTask = apps.get_model('django_celery_beat', 'PeriodicTask')

    for _task in cron_tasks:
        cron, _ = CrontabSchedule.objects.get_or_create(
            minute=_task[3], hour=_task[2], day_of_week='*', day_of_month='*',
            month_of_year='*', timezone=timezone)

        PeriodicTask.objects.create(
            crontab=cron, name=_task[0], task=_task[1])

    for _task in periodic_tasks:
        interval, _ = IntervalSchedule.objects.get_or_create(
            every=_task[2], period=_task[3])

        PeriodicTask.objects.create(
            interval=interval, name=_task[0], task=_task[1])


def add_ssl_ports(apps, schema_editor):
    ports = [(261, False, 'Nsiiops',),
             (443, True, 'HTTPS',),
             (446, False, 'Openfiler management interface',),
             (448, False, 'ddm-ssl',),
             (465, False, 'SMTPS',),
             (563, False, 'NNTPS',),
             (585, False, 'imap4-ssl',),
             (614, False, 'SSLshell',),
             (636, False, 'LDAPS',),
             (684, False, 'Corba IIOP SSL',),
             (695, False, 'IEEE-MMS-SSL',),
             (902, False, 'VMWare Auth Daemon',),
             (989, False, 'FTPS data',),
             ]

    model = apps.get_model('ssl_cert_tracker', 'SslProbePort')

    user = User.objects.filter(is_superuser=True)
    if user.exists():
        user = user.first()
    else:
        user = User.objects.create(
            username='soc_su', email='soc_su@phsa.ca',
            password='soc_su_password', is_active=True, is_staff=True,
            is_superuser=True)
        user.set_password('soc_su_password')
        user.save()

    for port in ports:

        ssl_port = model.objects.filter(port=port[0])
        if ssl_port.exists():
            ssl_port = ssl_port.get()
        else:
            ssl_port = model(
                port=port[0], created_by_id=user.id, updated_by_id=user.id)
            ssl_port.enabled = port[1]

        ssl_port.notes = port[2]
        ssl_port.save()


def add_beats_for_orion_flash(apps, schema_editor):
    timezone = pytz.timezone('America/Vancouver')

    periodic_tasks = [
        #         ('Dead Citrix monitoring bots alert',
        #          'citrus_borg.tasks.email_dead_borgs_alert', 10, 'minutes',),
        #         ('Dead Citrix farm hosts alert',
        #          'citrus_borg.tasks.email_dead_servers_alert', 12, 'hours',),
    ]

    cron_tasks = [
        {
            'name': 'Refresh Orion alerts for untrusted SSL certificates',
            'task': 'orion_flash.tasks.refresh_ssl_alerts',
            'args': '["orion_flash.untrustedsslalert"]',
            'kwargs': '{}',
            'crontab': {
                'minute': '01',
                'hour': '07,15,23',
                'day_of_week': '*',
                'day_of_month': '*',
                'month_of_year': '*',
                'timezone': timezone,
            },
        },
        {
            'name':
            ('Refresh Orion alerts for SSL certificates that will expire in'
             ' less than 90 days'),
            'task': 'orion_flash.tasks.refresh_ssl_alerts',
            'args': '["orion_flash.expiressoonsslalert"]',
            'kwargs': '{"lt_days":90}',
            'crontab': {
                'minute': '01',
                'hour': '07,15,23',
                'day_of_week': '*',
                'day_of_month': '*',
                'month_of_year': '*',
                'timezone': timezone,
            },
        },
        {
            'name':
            ('Refresh Orion alerts for SSL certificates that will expire in'
             ' less than 30 days'),
            'task': 'orion_flash.tasks.refresh_ssl_alerts',
            'args': '["orion_flash.expiressoonsslalert"]',
            'kwargs': '{"lt_days":30}',
            'crontab': {
                'minute': '02',
                'hour': '07,15,23',
                'day_of_week': '*',
                'day_of_month': '*',
                'month_of_year': '*',
                'timezone': timezone,
            },
        },
        {
            'name':
            ('Refresh Orion alerts for SSL certificates that will expire in'
             ' less than 7 days'),
            'task': 'orion_flash.tasks.refresh_ssl_alerts',
            'args': '["orion_flash.expiressoonsslalert"]',
            'kwargs': '{"lt_days":7}',
            'crontab': {
                'minute': '03',
                'hour': '07,15,23',
                'day_of_week': '*',
                'day_of_month': '*',
                'month_of_year': '*',
                'timezone': timezone,
            },
        },
        {
            'name':
            ('Refresh Orion alerts for SSL certificates that will expire in'
             ' less than 2 days'),
            'task': 'orion_flash.tasks.refresh_ssl_alerts',
            'args': '["orion_flash.expiressoonsslalert"]',
            'kwargs': '{"lt_days":2}',
            'crontab': {
                'minute': '04',
                'hour': '07,15,23',
                'day_of_week': '*',
                'day_of_month': '*',
                'month_of_year': '*',
                'timezone': timezone,
            },
        },
        {
            'name':
            ('Refresh Orion alerts for SSL certificates that have expired'),
            'task': 'orion_flash.tasks.refresh_ssl_alerts',
            'args': '["orion_flash.expiredsslalert"]',
            'kwargs': '{}',
            'crontab': {
                'minute': '05',
                'hour': '07,15,23',
                'day_of_week': '*',
                'day_of_month': '*',
                'month_of_year': '*',
                'timezone': timezone,
            },
        },
        {
            'name':
            ('Refresh Orion alerts for SSL certificates that are not yet'
             ' valid'),
            'task': 'orion_flash.tasks.refresh_ssl_alerts',
            'args': '["orion_flash.invalidsslalert"]',
            'kwargs': '{}',
            'crontab': {
                'minute': '06',
                'hour': '07,15,23',
                'day_of_week': '*',
                'day_of_month': '*',
                'month_of_year': '*',
                'timezone': timezone,
            },
        },
        {
            'name':
            ('Purge Orion alerts for SSL certificates'),
            'task': 'orion_flash.tasks.purge_ssl_alerts',
            'args': '[]',
            'kwargs': '{}',
            'crontab': {
                'minute': '55',
                'hour': '06,14,22',
                'day_of_week': '*',
                'day_of_month': '*',
                'month_of_year': '*',
                'timezone': timezone,
            },
        },
    ]

    CrontabSchedule = apps.get_model('django_celery_beat', 'CrontabSchedule')
    IntervalSchedule = apps.get_model(
        'django_celery_beat', 'IntervalSchedule')
    PeriodicTask = apps.get_model('django_celery_beat', 'PeriodicTask')

    for _task in cron_tasks:
        cron, _ = CrontabSchedule.objects.get_or_create(**_task['crontab'])

        _task['crontab'] = cron

        PeriodicTask.objects.create(**_task)

    for _task in periodic_tasks:
        interval, _ = IntervalSchedule.objects.get_or_create(
            every=_task[2], period=_task[3])

        PeriodicTask.objects.create(
            interval=interval, name=_task[0], task=_task[1])


def update_subscription(apps, schema_editor):
    Subscription = apps.get_model('ssl_cert_tracker', 'subscription')

    subscription = Subscription.objects.filter(
        subscription='Citrix logon event and ux summary')
    if subscription.exists():
        subscription = subscription.get()
        subscription.email_subject = (
            'Logon Events and Response Time Summary over the Last')
        subscription.alternate_email_subject = (
            'Logon Events and Response Time Summary by Hour')
        subscription.headers = '{},undetermined_events'.format(
            subscription.headers)

    else:
        subscription = Subscription(
            subscription='Citrix logon event and ux summary',
            email_subject=(
                'Logon Events and Response Time Summary over the Last'),
            alternate_email_subject=(
                'Logon Events and Response Time Summary by Hour'),
            headers=('hour,failed_events,successful_events,'
                     'avg_storefront_connection_time,avg_receiver_startup_time,'
                     'avg_connection_achieved_time,avg_logon_time,undetermined_events'),
            enabled=True,
            emails_list='TSCST-Support@hssbc.ca,TSCST-Shiftmanager@hssbc.ca',
            from_email='TSCST-Support@hssbc.ca',
            template_dir='ssl_cert_tracker/templates',
            template_name='login_ux_site_borg',
            template_prefix='email/',
        )

    subscription.save()


def update_subscriptions(apps, schema_editor):
    to_emails = ('TSCST-Support@hssbc.ca,TSCST-Shiftmanager@hssbc.ca')

    subscriptions = [
        {
            'subscription': 'SSL Report',
            'enabled': True,
            'emails_list': to_emails,
            'from_email': 'TSCST-Support@hssbc.ca',
            'template_dir': 'ssl_cert_tracker/templates',
            'template_name': 'ssl_cert_email',
            'template_prefix': 'email/',
            'email_subject': '',
            'alternate_email_subject': '',
            'headers': (
                'common_name,issuer__is_trusted,issuer__common_name,'
                'port__port,hostnames,expires_in_x_days,not_before,not_after'),
        },
        {
            'subscription': 'Expired SSL Report',
            'enabled': True,
            'emails_list': to_emails,
            'from_email': 'TSCST-Support@hssbc.ca',
            'template_dir': 'ssl_cert_tracker/templates',
            'template_name': 'ssl_cert_email',
            'template_prefix': 'email/',
            'email_subject': '',
            'alternate_email_subject': '',
            'headers': (
                'common_name,issuer__is_trusted,issuer__common_name,'
                'port__port,hostnames,has_expired_x_days_ago,'
                'not_before,not_after'),
        },
        {
            'subscription': 'Invalid SSL Report', 'enabled': True,
            'emails_list': to_emails,
            'from_email': 'TSCST-Support@hssbc.ca',
            'template_dir': 'ssl_cert_tracker/templates',
            'template_name': 'ssl_cert_email',
            'template_prefix': 'email/',
            'email_subject': '',
            'alternate_email_subject': '',
            'headers': (
                'common_name,issuer__is_trusted,issuer__common_name,'
                'port__port,hostnames,will_become_valid_in_x_days,'
                'not_before,not_after'),
        },
    ]

    subscription_model = apps.get_model('ssl_cert_tracker', 'subscription')

    subscription_model.objects.filter(subscription__icontains='ssl').\
        filter(subscription__icontains=', enhanced').all().delete()

    for subscription in subscriptions:
        subscription_instance = subscription_model.objects.filter(
            subscription=subscription.get('subscription'))
        subscription.pop('subscription')
        subscription_instance.update(**subscription)


class Migration(migrations.Migration):

    dependencies = [
        ('ssl_cert_tracker', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(add_default_ssl_port,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(prepare_task_schedules,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_ssl_ports,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_beats_for_orion_flash,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(update_subscription,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(update_subscriptions,
                             reverse_code=migrations.RunPython.noop)

    ]
