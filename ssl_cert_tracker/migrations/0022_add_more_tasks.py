# Generated by Django 2.1.4 on 2019-01-25 20:29
import pytz

from django.db import migrations


def prepare_task_schedules(apps, schema_editor):
    timezone = pytz.timezone('America/Vancouver')

    periodic_tasks = [
        #         ('Dead Citrix monitoring bots alert',
        #          'citrus_borg.tasks.email_dead_borgs_alert', 10, 'minutes',),
        #         ('Dead Citrix client sites alert',
        #          'citrus_borg.tasks.email_dead_sites_alert', 10, 'minutes',),
        #         ('Dead Citrix farm hosts alert',
        #          'citrus_borg.tasks.email_dead_servers_alert', 12, 'hours',),
        #         ('Citrix failed logon alerts',
        #          'citrus_borg.tasks.email_failed_login_alarm', 10, 'minutes',),
    ]

    cron_tasks = [
        ('Bootstrap nmap probes to collect SSL certificates',
         'ssl_cert_tracker.tasks.get_ssl_nodes', '06,18', '08',),
        ('Bootstrap nmap probes to verify SSL certificates',
         'ssl_cert_tracker.tasks.verify_ssl_certificates', '02', '35',)
    ]

    CrontabSchedule = apps.get_model('django_celery_beat', 'CrontabSchedule')
    IntervalSchedule = apps.get_model('django_celery_beat', 'IntervalSchedule')
    PeriodicTask = apps.get_model('django_celery_beat', 'PeriodicTask')

    for _task in cron_tasks:
        cron, _ = CrontabSchedule.objects.get_or_create(
            minute=_task[3], hour=_task[2], day_of_week='*', day_of_month='*',
            month_of_year='*', timezone=timezone)

        PeriodicTask.objects.create(
            crontab=cron, name=_task[0], task=_task[1])

    for _task in periodic_tasks:
        interval, _ = IntervalSchedule.objects.get_or_create(
            every=_task[2], period=_task[3])

        PeriodicTask.objects.create(
            interval=interval, name=_task[0], task=_task[1])


class Migration(migrations.Migration):

    dependencies = [
        ('ssl_cert_tracker', '0021_auto_20190125_1028'),
    ]

    operations = [
        migrations.RunPython(prepare_task_schedules,
                             reverse_code=migrations.RunPython.noop)

    ]
