# Generated by Django 2.1.4 on 2019-04-02 22:05

from django.db import migrations


def update_subscriptions(apps, schema_editor):
    to_emails = ('TSCST-Support@hssbc.ca,TSCST-Shiftmanager@hssbc.ca')

    subscriptions = [
        {
            'subscription': 'SSL Report',
            'enabled': True,
            'emails_list': to_emails,
            'from_email': 'TSCST-Support@hssbc.ca',
            'template_dir': 'ssl_cert_tracker/templates',
            'template_name': 'ssl_cert_email',
            'template_prefix': 'email/',
            'email_subject': '',
            'alternate_email_subject': '',
            'headers': (
                'common_name,issuer__is_trusted,issuer__common_name,'
                'port__port,hostnames,expires_in_x_days,not_before,not_after'),
        },
        {
            'subscription': 'Expired SSL Report',
            'enabled': True,
            'emails_list': to_emails,
            'from_email': 'TSCST-Support@hssbc.ca',
            'template_dir': 'ssl_cert_tracker/templates',
            'template_name': 'ssl_cert_email',
            'template_prefix': 'email/',
            'email_subject': '',
            'alternate_email_subject': '',
            'headers': (
                'common_name,issuer__is_trusted,issuer__common_name,'
                'port__port,hostnames,has_expired_x_days_ago,'
                'not_before,not_after'),
        },
        {
            'subscription': 'Invalid SSL Report', 'enabled': True,
            'emails_list': to_emails,
            'from_email': 'TSCST-Support@hssbc.ca',
            'template_dir': 'ssl_cert_tracker/templates',
            'template_name': 'ssl_cert_email',
            'template_prefix': 'email/',
            'email_subject': '',
            'alternate_email_subject': '',
            'headers': (
                'common_name,issuer__is_trusted,issuer__common_name,'
                'port__port,hostnames,will_become_valid_in_x_days,'
                'not_before,not_after'),
        },
    ]

    subscription_model = apps.get_model('ssl_cert_tracker', 'subscription')

    subscription_model.objects.filter(subscription__icontains='ssl').\
        filter(subscription__icontains=', enhanced').all().delete()

    for subscription in subscriptions:
        subscription_instance = subscription_model.objects.filter(
            subscription=subscription.get('subscription'))
        subscription.pop('subscription')
        subscription_instance.update(**subscription)


class Migration(migrations.Migration):

    dependencies = [
        ('ssl_cert_tracker', '0027_update_citrix_logon_event_and_ux_summary'),
    ]

    operations = [
        migrations.RunPython(update_subscriptions,
                             reverse_code=migrations.RunPython.noop)
    ]
